{
  "version": 3,
  "sources": ["../../consolite/esm/index.mjs", "../../@roxi/routify/lib/runtime/utils/logger.js", "../../@roxi/routify/lib/runtime/Global/BrowserAdapter.js", "../../@roxi/routify/lib/runtime/Global/Global.js", "../../@roxi/routify/lib/runtime/utils/index.js", "../../@roxi/routify/lib/runtime/utils/messages.js", "../../@roxi/routify/lib/runtime/helpers/preload.js", "../../@roxi/routify/lib/runtime/helpers/index.js", "../../@roxi/routify/lib/runtime/Route/utils.js", "../../@roxi/routify/lib/runtime/Route/RouteFragment.js", "../../@roxi/routify/lib/runtime/Route/Route.js", "../../@roxi/routify/lib/runtime/Router/urlReflectors/ReflectorBase.js", "../../@roxi/routify/lib/common/utils.js", "../../@roxi/routify/lib/common/RNode.js", "../../@roxi/routify/lib/runtime/Instance/Node.svelte", "../../@roxi/routify/lib/runtime/Instance/RNodeRuntime.js", "../../@roxi/routify/lib/runtime/Instance/UrlParamUtils.js", "../../@roxi/routify/lib/common/Routify.js", "../../@roxi/routify/lib/runtime/Instance/RoutifyRuntime.js", "../../hookar/esm/util.mjs", "../../hookar/esm/index.mjs", "../../@roxi/routify/lib/runtime/Router/urlReflectors/Address.js", "../../@roxi/routify/lib/runtime/Router/urlReflectors/Internal.js", "../../@roxi/routify/lib/runtime/plugins/reset/index.js", "../../@roxi/routify/lib/runtime/plugins/stripTrailingIndex/index.js", "../../@roxi/routify/lib/runtime/plugins/scroller/utils.js", "../../@roxi/routify/lib/runtime/plugins/scroller/ScrollContext.js", "../../@roxi/routify/lib/runtime/plugins/scroller/ScrollQueue.js", "../../@roxi/routify/lib/runtime/plugins/scroller/scroll.js", "../../@roxi/routify/lib/runtime/renderer/utils/index.js", "../../@roxi/routify/lib/runtime/plugins/scroller/ScrollDecorator.svelte", "../../@roxi/routify/lib/runtime/plugins/scroller/plugin.js", "../../@roxi/routify/lib/runtime/Router/utils/index.js", "../../@roxi/routify/lib/runtime/Router/Router.js", "../../@roxi/routify/lib/runtime/renderer/DecoratorWrapper.svelte", "../../@roxi/routify/lib/runtime/decorators/Noop.svelte", "../../@roxi/routify/lib/runtime/decorators/AnchorDecorator.svelte", "../../@roxi/routify/lib/runtime/renderer/RenderFragment.svelte", "../../@roxi/routify/lib/runtime/renderer/utils/normalizeInline.js", "../../@roxi/routify/lib/runtime/renderer/utils/normalizeDecorator.js", "../../@roxi/routify/lib/runtime/renderer/RenderContext.js", "../../@roxi/routify/lib/runtime/renderer/composeFragments.js", "../../@roxi/routify/lib/runtime/renderer/ComposeFragments.svelte", "../../@roxi/routify/lib/runtime/Router/Router.svelte", "../../@roxi/routify/lib/runtime/Router/urlReflectors/LocalStorage.js", "../../@roxi/routify/lib/runtime/utils/killWarnings.js", "../../@roxi/routify/lib/common/helpers.js", "../../@roxi/routify/lib/runtime/index.js"],
  "sourcesContent": ["// todo delimiter\n\n/**\n * @callback Filter\n * @param {string[]} prefixes\n */\n\n/**\n * @typedef {Object} ConsoliteOptions\n * @prop {Object<string, function>=} methods\n * @prop {function=} filter\n * @prop {(number | (()=>number))=} level\n * @prop {Object<string, number>=} levels\n */\n\n/**\n * @typedef {PrefixFn|string} Prefix\n */\n\nconst defaults = {\n  filter: '',\n  level: 3,\n  levels: {\n    default: 3,\n    error: 1,\n    warn: 2,\n    debug: 4,\n    trace: 4,\n  },\n}\n\nconst noop = x => x\nconst unique = (v, i, a) => a.indexOf(v) === i\n\n// $& means the whole matched string\nconst escapeRegExp = str => str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\nconst escapeIfString = str => (typeof str === 'string' ? escapeRegExp(str) : str)\n\nexport class ExtendConsole {\n  _filter = null\n  /** @type {number | (()=>number)} */\n  _level = null\n  _levels = {}\n  _prefix = []\n  _delimiter = null\n  logMethods = /** @type {Console} */ ({})\n\n  /**\n   * @param {ExtendConsole} parent\n   * @param {ConsoliteOptions} options\n   * @param {Prefix[]} prefix\n   */\n  constructor(parent, options, prefix) {\n    this.parent = parent\n    this.options = options\n    if (!parent) this.logMethods = { ...console }\n    Object.assign(this.logMethods, options?.methods)\n    this._prefix = prefix\n    Object.defineProperties(this, {\n      _filter: { enumerable: false },\n      _level: { enumerable: false },\n      _levels: { enumerable: false },\n      _prefix: { enumerable: false },\n    })\n  }\n\n  /**\n   * @template {ConsoliteOptions}  T\n   * @template {ConsoliteOptions extends Object ? T['methods'] : ConsoliteOptions['methods']} Methods\n   * @param {T | Prefix=} optsOrPrefix\n   * @param  {...Prefix} prefix\n   * @returns {ConsoliteLogger<this, Methods>}\n   */\n  createChild(optsOrPrefix, ...prefix) {\n    const hasOptions = typeof optsOrPrefix === 'object'\n    const options = hasOptions ? optsOrPrefix : {}\n    if (!hasOptions && optsOrPrefix) prefix.unshift(optsOrPrefix)\n    return createProxy(this, options, prefix)\n  }\n\n  register(name, fn) {\n    this.logMethods[name] = fn\n  }\n\n  /**\n   * get prop from self or nearest ancestor\n   * @template T\n   * @param {(((T)=>{})|string|symbol)} cb\n   */\n  getNearest(cb) {\n    const fn = typeof cb === 'string' || typeof cb === 'symbol' ? x => x[cb] : cb\n    const result = fn(this)\n    return result !== null && result !== undefined\n      ? result\n      : this.parent && this.parent.getNearest(fn)\n  }\n\n  get prefix() {\n    /** @type {ExtendConsole} */\n    let parent = this\n    const accumulatedPrefixes = [...this._prefix]\n    while ((parent = parent.parent)) accumulatedPrefixes.unshift(...parent._prefix)\n    return accumulatedPrefixes\n  }\n\n  get formattedPrefixes() {\n    if (!this.delimiter) return this.prefix\n    else {\n      const prefixes = []\n      this.prefix.forEach(prefix => prefixes.push(prefix, this.delimiter))\n      return prefixes\n    }\n  }\n\n  get delimiter() {\n    return this.getNearest('_delimiter')\n  }\n\n  set delimiter(value) {\n    this._delimiter = value\n  }\n\n  set prefix(value) {\n    this._prefix = Array.isArray(value) ? value : [value]\n  }\n\n  /** @type {number | (()=>number)} */\n  get level() {\n    const level = this.getNearest('_level') ?? defaults.level\n    return typeof level === 'function' ? level() : level\n  }\n\n  /** @type {number | (()=>number)} */\n  set level(val) {\n    this._level = val\n  }\n  get filter() {\n    return this.getNearest('_filter') ?? defaults.filter\n  }\n  set filter(val) {\n    this._filter = val\n  }\n  get __self() {\n    return this\n  }\n  get root() {\n    return this.parent?.root || this\n  }\n\n  levels = new Proxy(this._levels, {\n    // todo could be cleaner. Might not need proxy\n    ownKeys: target =>\n      [\n        ...Object.keys(defaults.levels),\n        ...Object.keys(this.parent?.levels || {}),\n        ...Reflect.ownKeys(target),\n      ].filter(unique),\n    getOwnPropertyDescriptor: (target, key) => ({\n      value: target[key],\n      enumerable: true,\n      configurable: true,\n    }),\n    get: (target, prop) =>\n      target[prop] ||\n      target.default ||\n      this.parent?.levels[prop] ||\n      this.parent?.levels.default ||\n      defaults.levels[prop] ||\n      defaults.levels.default,\n    set: (target, prop, value) => (target[prop] = value),\n  })\n}\n\n/**\n * @template {ConsoliteOptions} O\n * @template {ExtendConsole} P\n * @param {P} parent\n * @param {O | null} options\n * @param {(string|PrefixFn)[]} prefix\n * @returns {ConsoliteLogger<P, Console & O['methods']>}\n */\nexport const createProxy = (parent, options, prefix) => {\n  const extendedConsole = new ExtendConsole(parent, options, prefix)\n  const proxy = /** @type {ConsoliteLogger<P, Console & O['methods']>} */ (\n    new Proxy(extendedConsole, {\n      get(target, prop) {\n        if (Reflect.has(target, prop)) return Reflect.get(target, prop)\n\n        const fn = target.getNearest(t => t.logMethods[prop])\n\n        if (fn) {\n          const withinLevel = prop => target.levels[prop] <= target.level\n          const passesFilter = () =>\n            typeof target.filter === 'function'\n              ? target.filter(target.prefix, prop)\n              : target.prefix.join('').match(escapeIfString(target.filter))\n\n          const canBind = typeof fn === 'function'\n          const shouldPrint = withinLevel(prop) && passesFilter() && canBind\n          const prefixes = target.formattedPrefixes.map(p =>\n            typeof p === 'string' ? p : p(prop),\n          )\n\n          return shouldPrint ? fn.bind(console, ...prefixes) : noop\n        }\n      },\n      set(target, prop, value) {\n        if (Reflect.has(target, prop)) target[prop] = value\n        else if (value instanceof Function) target.logMethods[prop] = value\n        else return false\n        return true\n      },\n      ownKeys(target) {\n        const keys = [...Reflect.ownKeys(target), ...Reflect.ownKeys(target.logMethods)]\n        let parent = target\n        while ((parent = parent.parent)) keys.push(...Reflect.ownKeys(parent.logMethods))\n        return keys\n      },\n      getOwnPropertyDescriptor(target, prop) {\n        if (Reflect.get(target, prop))\n          return Object.getOwnPropertyDescriptor(target, prop)\n\n        return (\n          (parent && parent.getNearest(t => Object.getOwnPropertyDescriptor(t.logMethods, prop))) ||\n          undefined\n        )\n      },\n    })\n  )\n  return proxy\n}\n\n/**\n * @callback PrefixFn\n * @param {string|symbol} method console method, eg. log, debug etc...\n */\n\n/**\n * @template {ExtendConsole} Parent\n * @template {ConsoliteOptions['methods']} Methods\n * @typedef {Parent & Methods} ConsoliteLogger\n **/\n\n/**\n * @template {ConsoliteOptions} O\n * @param {O | Prefix=} optsOrPrefix\n * @param {(string|PrefixFn)[]} prefix\n * @returns {ConsoliteLogger<ExtendConsole, Console & O['methods']>}\n */\nexport const createLogger = (optsOrPrefix, ...prefix) => {\n  const hasOptions = typeof optsOrPrefix === 'object'\n  const options = hasOptions ? optsOrPrefix : {}\n  if (!hasOptions && optsOrPrefix) prefix.unshift(optsOrPrefix)\n  return createProxy(this, options, prefix)\n}\n\nexport class Consolite {\n  constructor(optsOrPrefix, ...prefix) {\n    return createLogger(optsOrPrefix, ...prefix)\n  }\n}\n", "import { createLogger } from 'consolite'\nconst log = createLogger('[rf3]')\nlog.register('verbose', console.log)\nlog.levels.verbose = 5\n\nexport const createRootLogger = () => {\n    Object.assign(log, loadState())\n    return new Proxy(log, {\n        get: (target, prop) => target[prop],\n        set: (target, prop, value) => {\n            target[prop] = value\n            saveState(log)\n            return true\n        },\n    })\n}\n\nexport const loadState = () => {\n    if (typeof window === 'undefined') {\n        const level = process.env.DEBUG_LEVEL\n        const filter = process.env.DEBUG_FILTER\n        return { level, filter }\n    } else {\n        return JSON.parse(localStorage.getItem('__routify.logState') || '{}')\n    }\n}\n\nexport const saveState = log => {\n    const { level, filter } = log\n    if (typeof window === 'undefined') {\n        process.env.DEBUG_LEVEL = level\n        process.env.DEBUG_FILTER = filter\n    } else localStorage.setItem('__routify.logState', JSON.stringify({ filter, level }))\n}\n\n/**\n * @template {function} T\n * @param {T} fn\n * @param {string} msg\n * @returns {T}\n */\nexport const debugWrapper =\n    (fn, msg) =>\n    /** @ts-ignore */\n    (...params) => {\n        const result = fn(...params)\n        log.debug(msg, { params, result })\n        return result\n    }\n", "/** @returns {BrowserAdapter} */\nexport const createBrowserAdapter = opts => {\n    const delimiter = opts?.delimiter || ';'\n\n    return {\n        // Called by each router when the browser URL changes. Returns an internal URL for each respective router.\n        toRouter: (url, router) => {\n            const formatRE = router.name ? `${router.name}=(.+?)` : `(.+?)`\n            const RE = new RegExp(`(^|${delimiter})${formatRE}(${delimiter}|$)`)\n\n            const matches = url.match(RE)\n            return matches ? matches[2] : '/'\n        },\n        // compiles all router URLS into a single URL for the browser.\n        toBrowser: routers =>\n            routers\n                .map(r => (r.name ? `${r.name}=` : '') + r.url.external())\n                .join(delimiter),\n    }\n}\n", "import { urlFromAddress } from '../utils/index.js'\n// ROUTIFY-DEV-ONLY-START\nimport { createRootLogger, debugWrapper } from '../utils/logger.js'\n// ROUTIFY-DEV-ONLY-END\n\nimport { createBrowserAdapter } from './BrowserAdapter.js'\n\nexport class AppInstance {\n    /** @type {RoutifyRuntime[]} */\n    instances = []\n\n    constructor() {\n        globalThis['__routify'] = this\n\n        this.log = createRootLogger() // ROUTIFY-DEV-ONLY\n    }\n\n    /** @type {Router[]} */\n    get routers() {\n        return [].concat(...this.instances.map(instance => instance.routers))\n    }\n\n    /** @type {import('../helpers/preload.js').RoutesMap} */\n    routeMaps = {}\n\n    browserAdapter = createBrowserAdapter()\n\n    /** @param {Router} router */\n    urlFromBrowser = router => {\n        // ROUTIFY-DEV-ONLY-START\n        if (debugWrapper)\n            return debugWrapper(\n                this.browserAdapter.toRouter,\n                'calling browserAdapter.toRouter',\n            )(urlFromAddress(), router)\n        // ROUTIFY-DEV-ONLY-END\n\n        return this.browserAdapter.toRouter(urlFromAddress(), router)\n    }\n\n    register(instance) {\n        this.instances.push(instance)\n        return this\n    }\n}\n\nexport const appInstance = new AppInstance()\n", "import { get, writable } from 'svelte/store'\nimport { getContext, setContext } from 'svelte'\nimport { appInstance } from '../Global/Global.js'\nexport * from './logger.js' // ROUTIFY-DEV-ONLY\n\nconst CTX = 'routify-fragment-context'\n\n// /**\n//  * writable with subscription hooks\n//  * @param {any} value\n//  */\n// export const writable2 = value => {\n//     let subscribers = []\n//     let { set, subscribe, update } = writable(value)\n\n//     const hooks = {\n//         onSub: () => {},\n//         onUnsub: () => {},\n//         onFirstSub: () => {},\n//         onLastUnsub: () => {},\n//     }\n\n//     const newSubscribe = (run, invalidator) => {\n//         // hooks\n//         hooks.onSub()\n//         if (!subscribers.length) hooks.onFirstSub()\n\n//         const unsub = subscribe(run, invalidator)\n//         subscribers.push(unsub)\n//         return () => {\n//             hooks.onUnsub()\n//             if (subscribers.length === 1) hooks.onLastUnsub()\n\n//             subscribers = subscribers.filter(_unsub => _unsub !== unsub)\n//             unsub()\n//         }\n//     }\n\n//     return {\n//         set,\n//         subscribe: newSubscribe,\n//         update,\n//         subscribers,\n//         hooks,\n//     }\n// }\n\nexport const getRoutifyFragmentContext = () => getContext(CTX)\n\n/**\n * gets context if available without throwing errors outside component initialization\n * @returns\n */\nexport const getRoutifyFragmentContextMaybe = () => {\n    try {\n        const ctx = getRoutifyFragmentContext()\n        return ctx\n    } catch (e) {}\n}\nexport const setRoutifyFragmentContext = value => setContext(CTX, value)\n\nexport const isDescendantElem = parent => elem => {\n    while ((elem = elem.parentNode)) if (elem === parent) return true\n    return false\n}\n\nexport const shouldIgnoreClick = event =>\n    event.ctrlKey ||\n    event.metaKey ||\n    event.altKey ||\n    event.shiftKey ||\n    event.button ||\n    (event.key && event.key !== 'Enter') ||\n    event.defaultPrevented\n\nconst parseValue = value => {\n    try {\n        return JSON.parse(value)\n    } catch (error) {\n        return value\n    }\n}\nconst extractRoutifyStateData = el => {\n    const routifyRouteState = {}\n\n    for (let key in el.dataset) {\n        if (key.startsWith('routifyRouteState')) {\n            // remove 'routifyRouteState' from the key and convert first character to lowercase\n            const shortKey = key.replace('routifyRouteState', '')\n            const finalKey = shortKey.charAt(0).toLowerCase() + shortKey.slice(1)\n\n            routifyRouteState[finalKey] = parseValue(el.dataset[key])\n        }\n    }\n    return routifyRouteState\n}\n\nexport const getUrlFromEvent = event => {\n    const el = event.target.closest('a')\n    const href = el && el.href\n\n    if (!href || el.target || el.host !== location.host) return {}\n\n    const urlObj = new URL(href)\n\n    event.preventDefault()\n    return {\n        url: urlObj.pathname + urlObj.search + urlObj.hash,\n        state: extractRoutifyStateData(el),\n    }\n}\n\n// TODO REMOVE?\n/**\n * Creates an url from a path and params objects\n * @example no wildcard\n * ```javascript\n * pathAndParamsToUrl('/foo/[slug]/[id]', {slug: 'hello'})\n * // /foo/hello/[id]\n * ```\n * @example wildcard\n * ```javascript\n * pathAndParamsToUrl('/foo/[slug]/[id]', {slug: 'hello'}, undefined, true)\n * // /foo/hello/.*?\n * ```\n * @param {string} path\n * @param {Object.<string|number,string|number>} params\n * @param {function} queryHandler\n * @param {boolean} useWildcards inserts wildcards for unmatched params\n * @returns {string}\n */\n// export const pathAndParamsToUrl = (path, params = {}, queryHandler, useWildcards) => {\n//     Object.entries(params).forEach(([key, val]) => {\n//         if (path.includes(`[${key}]`)) {\n//             path = path.replace(`[${key}]`, val)\n//             delete params[key]\n//         }\n//     })\n\n//     if (useWildcards) path = insertWildcards(path)\n\n//     return path + queryHandler(params)\n// }\n\n/**\n * replaces /path/[foo]/bar with /path/.*?/bar\n * @param {string} str\n */\nexport const insertWildcards = str => {\n    return str.replace(/\\[.*?\\]/, '.*?')\n}\n\nexport const fromEntries = iterable => {\n    return [...iterable].reduce((obj, [key, val]) => {\n        obj[key] = val\n        return obj\n    }, {})\n}\n\n/**\n * replaces [] brackets in a string with actual params\n * @param {string} path\n * @param {Object.<string,(string|string[])>} params\n * @param {(obj: Object.<string, string>) => string} overloadStringifier\n * @returns\n */\nexport const populateUrl = (path, params, overloadStringifier) => {\n    /** @type {Object.<string, string>} overloads are params that have no dedicated component */\n    const overloads = {}\n    Object.entries(params).forEach(([param, value]) => {\n        const RE = new RegExp(`\\\\[(\\.\\.\\.)?${param}\\\\]|\\\\:${param}`)\n        value = Array.isArray(value) ? value.join('/') : value\n        if (path.match(RE)) path = path.replace(RE, encodeURI(value))\n        else overloads[param] = value\n    })\n    const query = overloadStringifier(overloads)\n\n    return path + query\n}\n\nexport const urlFromAddress = () =>\n    (({ pathname, search, hash }) => pathname + search + hash)(window.location)\n\nlet _globalAutoIncrementerCount = {}\nexport const autoIncrementer = (\n    storeObj = _globalAutoIncrementerCount,\n    name = '__NA',\n) => {\n    storeObj[name] = storeObj[name] || 0\n    storeObj[name]++\n    return storeObj[name]\n}\n\n/**\n * @template  T\n * @param {string} prop\n * @returns {function(T, number, T[]): boolean}\n */\nexport const distinctBy = prop => (obj, i, arr) =>\n    arr.findIndex(_obj => _obj[prop] === obj[prop]) === i\n\n/** @returns {RenderContext} */\nconst getGlobalContext = () => {\n    console.log('Using helpers outside router context is not supported. Use at own risk.')\n    const router = appInstance.routers[0]\n    const route = router.activeRoute.get() || router.pendingRoute.get()\n\n    return {\n        elem: null,\n        anchorLocation: null,\n        options: null,\n        childFragments: writable(route.allFragments),\n        node: router.rootNode,\n        fragment: route.allFragments[0],\n        isActive: writable(false),\n        isVisible: writable(false),\n        inline: null,\n        router,\n        route,\n        parentContext: null,\n        onDestroy: null,\n        decorators: [],\n        scrollBoundary: null,\n        isInline: null,\n        mounted: null,\n    }\n}\n\nexport const contexts = {\n    /** @type {Router} */\n    get router() {\n        return (getRoutifyFragmentContext() || getGlobalContext()).router\n    },\n    /** @type {RenderContext} */\n    get fragment() {\n        return getRoutifyFragmentContext() || getGlobalContext()\n    },\n}\n\n/**\n * @template T\n * @typedef {import('svelte/store').Writable<T> & {get: ()=>T}} Getable\n */\n\n/**\n * like writable, but with an added get prop\n * @template T\n * @param  {T} value\n * @param  {import('svelte/store').StartStopNotifier<T>=} start\n * @returns {Getable<T>}\n */\nexport const getable = (value, start) => {\n    const store = writable(value, start)\n    return Object.assign(store, { get: () => get(store) })\n}\n\n/**\n * checks if all route.fragments and url are identical\n * @param  {...Route} routes\n * @returns\n */\nexport const identicalRoutes = (...routes) =>\n    routes\n        .map(route => JSON.stringify([route?.allFragments, route?.url]))\n        .reduce((prev, curr) => prev === curr && curr)\n\n/**\n * Shallow clones class instance.\n * Variadic parameters are assigned to clone.\n * @template T\n * @param {T} obj\n * @param  {...any} rest\n * @returns {T}\n */\nexport const clone = (obj, ...rest) =>\n    Object.assign(Object.create(Object.getPrototypeOf(obj)), obj, ...rest)\n\nexport const isAnonFn = input => typeof input === 'function' && !input.prototype\n\n/**\n * Resolves the given `subject` as a function if it is anonymous, otherwise returns the subject as is\n * @template T\n * @template P\n * @param {T | ((...P)=>T) | ((...P)=>Promise<T>) } subject The subject to be resolved.\n * @param {P[]=} params An optional array of parameters to pass to the anonymous function.\n * @returns {T}\n */\nexport const resolveIfAnonFn = (subject, params) =>\n    isAnonFn(subject) ? /** @type {any} */ (subject)(...params) : subject\n\nexport const resolveIfHasCallback = (subject, params, field = 'callback') =>\n    subject?.[field] ? subject[field](params) : subject\n\n/**\n * Takes an array to clone and an A) item to push to the array or B an anonymous function where the first parameter is the cloned array\n * @example\n * ```javascript\n * const array = [1,2,3] *\n * pushToOrReplace(array, 'foo')                    // [1, 2, 3, 'foo']\n * pushToOrReplace(array, ()=>['foo'])              // ['foo']\n * pushToOrReplace(array, (arr)=>['foo', ...arr])   // ['foo', 1, 2, 3]\n * ```\n * @param {any[]} arr\n * @param {any} input anonymous functions will be treated as callbacks\n * @returns\n */\nexport const pushToOrReplace = (arr, input) => {\n    const _isAnonFn = isAnonFn(input)\n    input = _isAnonFn || Array.isArray(input) ? input : [input]\n\n    const res = _isAnonFn ? input([...arr]) : [...arr, ...input]\n    if (!Array.isArray(res)) throw new Error('anonymous callback did not return array')\n    return res\n}\n\n/**\n * waits for the callback to return true\n * @template T\n * @param {import('svelte/store').Writable<T>} store the store to be passed to the callback\n * @param {(T)=>boolean} cb callback\n * @returns {Promise<T>}\n */\nexport const waitFor = (store, cb) =>\n    new Promise((resolve, reject) => {\n        try {\n            const unsub = store.subscribe(val => {\n                if (cb(val)) {\n                    resolve(val)\n                    setTimeout(() => unsub)\n                }\n            })\n        } catch (err) {\n            reject(err)\n        }\n    })\n\n/**\n * @template T\n * @returns {DeferredPromise<T>}\n */\nexport const createDeferredPromise = () => {\n    let resolve, reject\n    const promise = new Promise((_resolve, _reject) => {\n        resolve = _resolve\n        reject = _reject\n    })\n\n    return Object.assign(promise, { resolve, reject })\n}\n", "export const couldNotFindRoutes =\n    name => `Could not find routes for the router '${name}'. Please use the 'routes' prop or create a route tree named '${name}'.\nEg. routesDir: {\n    default: 'src/routes',\n    ${name}: 'src/widget',\n}`\n\nexport const noRoutesMapProvided = name =>\n    `No routesMap provided. Make sure you\\'ve either created a router for the '${name}' route or provided a routesMap`\n\nexport const handleRebuildError = (context, childContexts) => {\n    console.warn('Failed to rebuild routes', { context, childContexts })\n    const msg =\n        'Infinite loop detected while trying to compose components. This is likely an error in Routify.'\n    const err = new Error(msg)\n\n    throw err\n}\n", "/**\n * @typedef {[routerName:string, url:string]} UrlPair\n */\n\nimport { appInstance } from '../index.js'\nimport { createRouter } from '../Router/Router.js'\nimport { couldNotFindRoutes, noRoutesMapProvided } from '../utils/messages.js'\n\n/**\n * @typedef {Object.<string, ()=>Promise>} RoutesMap\n */\n\n/**\n * @typedef {Object} PreloadOptions\n * @property {RoutesMap=} routesMap\n * @property {string | string[] =} url\n */\n\nconst getWindowUrl = () =>\n    typeof window === 'undefined'\n        ? ''\n        : window.location.pathname + window.location.search + window.location.hash\n\n/**\n * Preloads all stale routers. A router is stale if it's present in the composite url,\n * but its current route doesn't match the composite url\n * @param {string | string[] | PreloadOptions=} urlOrOptions composite url - can contain a single or multiple urls separated by \";\"\n */\nexport const preloadUrl = urlOrOptions => {\n    /** @type {PreloadOptions} */\n    const options =\n        typeof urlOrOptions === 'string' || Array.isArray(urlOrOptions)\n            ? { url: urlOrOptions }\n            : urlOrOptions\n\n    let { url, routesMap } = options\n\n    url =\n        url ??\n        import.meta['env']?.ROUTIFY_URL ??\n        import.meta['env']?.URL ??\n        getWindowUrl()\n\n    const urls = Array.isArray(url) ? url : [url]\n\n    return Promise.all(\n        urls.map(url => preloadUrlFromUrlPairs(getUrlSegments(url), routesMap)),\n    )\n}\n\nconst createNewRouter = async (name, url, routesMap) => {\n    const fullName = name || 'default'\n    if (!routesMap) console.error(noRoutesMapProvided(fullName))\n    const getRoutes = routesMap[fullName]\n    if (!getRoutes) {\n        console.error(couldNotFindRoutes(fullName))\n        return false\n    }\n\n    return createRouter({ name, url, routes: await getRoutes() })\n}\n\n/**\n * Preloads all stale routers. A router is stale if it's present in the composite url,\n * but its current route doesn't match the composite url\n * @param {UrlPair[]} urlPairs composite url - can contain a single or multiple urls\n * @param {RoutesMap=} routesMap\n */\nexport const preloadUrlFromUrlPairs = async (urlPairs, routesMap) => {\n    const routerPromises = urlPairs.map(async ([name, url]) => {\n        const matchingRouter = appInstance.routers.find(router => router.name === name)\n\n        const router = matchingRouter || (await createNewRouter(name, url, routesMap))\n        if (!router) return false\n\n        // if router has none or bad url, use url from the urlPair\n        const currentRoute = router.pendingRoute.get() || router.activeRoute.get()\n        if (currentRoute?.url !== url) router.url.replace(url)\n\n        return router\n    })\n\n    const routers = await Promise.all(routerPromises)\n\n    await Promise.all(routers.map(router => router && router.ready()))\n    return routers.map(router => router.activeRoute.get().load)\n}\n\n/**\n * Parses a composite url into a list of url pairs\n * Eg. \"/path/to/page;router1=/path/to/page;router2=/path/to/page\" => [[\"\", \"/path/to/page\"], [\"router1\", \"/path/to/page\"], [\"router2\", \"/path/to/page\"]]\n * @param {string} compositeUrl\n * @returns\n */\nconst getUrlSegments = compositeUrl =>\n    compositeUrl.split(';').map(urlSegmentToRouterAndUrl)\n\n/**\n * Parses a url segment into a router name and url\n * Eg. \"router1=/path/to/page\" => [\"router1\", \"/path/to/page\"]\n * @param {string} urlSegment\n * @param {number} index\n * @returns {[routerName:string, url:string]}\n */\nconst urlSegmentToRouterAndUrl = (urlSegment, index) => {\n    if (!index) return ['', urlSegment]\n    const matches = urlSegment.match(/([\\w-]+?)=(.+)/)\n    return [matches[1], matches[2]]\n}\n\n/**\n * Returns the primary url from a list of url pairs\n * The primary url is the one without a router name\n * @param {UrlPair[]} urlPairs\n * @returns\n */\nexport const getPrimaryUrl = urlPairs => urlPairs.find(([name]) => name === '')[1]\n", "import { derived } from 'svelte/store'\nimport { contexts, populateUrl } from '../utils/index.js'\n\nimport { get } from 'svelte/store'\nexport * from './preload.js'\n\n/**\n * gets most recent common ancestor\n * @param {RNodeRuntime} node1\n * @param {RNodeRuntime} node2\n */\nexport const getMRCA = (node1, node2) => {\n    const lineage1 = [node1, ...node1.ancestors]\n    const lineage2 = [node2, ...node2.ancestors]\n    return lineage1.find(node => lineage2.includes(node))\n}\n\nexport const getPath = (node1, node2) => {\n    const lineage1 = [node1, ...node1.ancestors]\n    const lineage2 = [node2, ...node2.ancestors]\n    const mrca = getMRCA(node1, node2)\n    const backtrackSteps = lineage1.indexOf(mrca)\n    const backtrackStr = backtrackSteps ? '../'.repeat(backtrackSteps) : ''\n    const forwardSteps = lineage2.indexOf(mrca)\n    const forwardStepsStr = lineage2\n        .slice(0, forwardSteps)\n        .reverse()\n        .map(n => n.name)\n        .join('/')\n    return backtrackStr + forwardStepsStr\n}\n\n/**\n * @callback Goto\n * @param {string} path relative, absolute or named URL\n * @param {Object.<string, string>=} userParams\n * @param {Partial<$UrlOptions & RouteState>=} options\n * @type {Readable<Goto>} */\nexport const goto = {\n    subscribe: (run, invalidate) => {\n        const { router } = contexts\n        return derived(url, $url => (path, userParams, options) => {\n            const defaults = { mode: 'push', state: {} }\n            options = { ...defaults, ...options }\n            const newUrl = $url(path, userParams, options)\n            router.url[options.mode](newUrl, options.state)\n            return ''\n        }).subscribe(run, invalidate)\n    },\n}\n\n/**\n * @template T\n * @typedef {import('svelte/store').Readable<T>} Readable\n */\n\n/**\n * @typedef {Object} IsActiveOptions\n * @prop {Boolean} [recursive=true] return true if descendant is active\n */\n\n/**\n * @typedef {Object} $UrlOptions\n * @prop {boolean} strict Require internal paths. Eg. `/blog/[slug]` instead of `/blog/hello-world`\n * @prop {boolean} includeIndex suffix path with `/index`\n * @prop {boolean} silent suppress errors\n * @prop {'push'|'replace'} mode push to or replace in navigation history\n */\n\n/**\n * @typedef {Partial<{\n *  dontscroll: boolean,\n *  dontsmoothscroll: boolean,\n * [key:string]: *\n * }>} RouteState\n */\n\n/**\n * @typedef {(<T extends string | HTMLAnchorElement>(\n *   inputPath: T,\n *   userParams?: { [x: string]: string; },\n *   options?: Partial<$UrlOptions>\n * ) => T extends HTMLAnchorElement ? void : string)} Url\n */\n\n/**\n * @typedef {((\n *   inputPath: string,\n *   userParams?: { [x: string]: string; },\n *   options?: Partial<$UrlOptions>\n * ) => string)} UrlFromString\n */\n\n/**\n * @type {Readable<Url>}\n */\nexport const _url = {\n    subscribe: (run, invalidate) => {\n        const { fragment, router } = contexts\n\n        return derived(fragment.params, $params => {\n            return createUrl(fragment.fragment, router)\n        }).subscribe(run, invalidate)\n    },\n}\n\n/**\n * @type {Readable<Url>}\n */\nexport const url = {\n    subscribe: (run, invalidate) => {\n        let InitialElem, initialParams, initialPath\n\n        const updateHref = $url =>\n            InitialElem.setAttribute('href', $url(initialPath, ...initialParams))\n\n        return derived(_url, $url => {\n            if (InitialElem) {\n                // if we're dealing with an already set anchor element, set the href\n                updateHref($url)\n            }\n\n            // todo for some reason we always need to return this function, but it really shouldn't be necessary when an elem has been set\n            return (pathOrElem, ...params) => {\n                // if we're dealing with a string, return the rendered url\n                if (typeof pathOrElem != 'object') {\n                    return $url(pathOrElem, ...params)\n                }\n\n                // if we're dealing with an anchor element, store it\n                InitialElem = pathOrElem\n                initialParams = params\n                initialPath = InitialElem.getAttribute('href')\n                updateHref($url)\n            }\n        }).subscribe(run, invalidate)\n    },\n}\n\n/**\n *\n * @param {RouteFragment} fragment\n * @returns {UrlFromString}\n */\nexport const createUrl =\n    (fragment, router) =>\n    /** @type {UrlFromString} */\n    (_inputPath, userParams = {}, options = {}) => {\n        const route = fragment.route\n        // const route = fragment.route || router.activeRoute.get()\n\n        // in case we swapped the routes tree (rootNode), make sure we find\n        // the node that corresponds with the previous origin\n        // otherwise mrca will break as there's no shared ancestor\n        const originNode = router.rootNode.traverse(fragment.node.path)\n\n        const inputPath = _inputPath.replace('$leaf', route?.url || fragment.node.path)\n\n        // we want absolute urls to be relative to the nearest router. Ironic huh\n        const offset = inputPath.startsWith('/') ? router.rootNode.path : ''\n        const targetNode = originNode.traverse(\n            offset + inputPath, // path\n            !options.strict, // allowDynamic\n            options.includeIndex, // includeIndex\n            options.silent, // silent\n        )\n        if (!targetNode) {\n            console.error('could not find destination node', inputPath)\n            return\n        }\n        // get lowest common ancestor\n        const mrca = getMRCA(targetNode, router.rootNode)\n        const path = ('/' + getPath(mrca, targetNode)).replace(/\\/index$/, '/')\n\n        const params = {\n            ...inheritedParams(targetNode, route || router.activeRoute.get()),\n            ...userParams,\n        }\n\n        const urlHandler = obj => router.queryHandler.stringify(obj, route)\n        const internalUrl = populateUrl(path, params, urlHandler)\n\n        const externalUrl = router.getExternalUrl(internalUrl)\n        return externalUrl\n    }\n\n// todo only one target node is checked in inheritedParams\n/**\n * copies params from all fragments in the route chain\n * @param {RNodeRuntime} node\n * @param {Route} route\n */\nconst inheritedParams = (node, route) => {\n    const params = route.allFragments.map(\n        // if node is a descendant of the fragment's node, return params\n        fragment => fragment.node.getChainToNode(node) && fragment.params,\n    )\n    return Object.assign({}, ...params)\n}\n\n/**\n * @type {Readable<Object.<string, any>>}\n */\nexport const params = {\n    subscribe: (run, invalidate) => {\n        return derived(\n            [contexts.router.params, contexts.fragment.params],\n            ([routerParams, fragmentParams]) => ({ ...routerParams, ...fragmentParams }),\n        ).subscribe(run, invalidate)\n    },\n}\n\n/**\n * @callback IsActive\n * @param {String=} path\n * @param {Object.<string,string>} [params]\n * @param {IsActiveOptions} [options]\n * @returns {Boolean}\n *\n * @type {Readable<IsActive>} */\nexport const isActive = {\n    subscribe: (run, invalidate) => {\n        const { fragment, router } = contexts\n        return derived(router.activeRoute, () => isActiveUrl(fragment)).subscribe(\n            run,\n            invalidate,\n        )\n    },\n}\n\n/**\n *\n * @param {RenderContext} context\n * @param {string} path\n * @param {Object.<string, string>} params\n *\n */\nconst traverseContext = (context, path, params) => {\n    const breadcrumbs = path.split('/')\n    let targetContexts = [context]\n    for (const crumb of breadcrumbs) {\n        if (!targetContexts) return false\n        if (crumb === '..') {\n            targetContexts = [targetContexts[0].parentContext]\n        } else if (crumb != '.') {\n            const childContexts = targetContexts.map(ctx => get(ctx.childContexts)).flat()\n            targetContexts = childContexts.filter(\n                childContext => childContext.node.name === crumb,\n            )\n        }\n    }\n\n    const targetContext = targetContexts.find(ctx => {\n        // get all ancestor params. ctx does not have ancestor prop. Only parentContext\n        const paramsStores = [ctx.params, ...ctx.ancestors.map(ctx => ctx.params)]\n        const existingParams = Object.assign({}, ...paramsStores.map(store => get(store)))\n\n        // make sure each param in the params object is present in the context chain\n        const allParamsArePresent = Object.entries(params).every(\n            ([key, value]) => existingParams[key] === value,\n        )\n\n        return allParamsArePresent\n    })\n\n    return targetContext\n}\n\nexport const isActiveFragment = {\n    subscribe: (run, invalidate) => {\n        const { fragment: context, router } = contexts\n\n        const refresh = () => {\n            /**\n             * @param {string} path\n             * @param {Object.<string, string | string[]>} params\n             * @param {IsActiveOptions} options\n             * @param {boolean} options.recursive also check if all ancestors are active\n             */\n            run((path, params, options) => {\n                options = { recursive: false, ...options }\n                const targetContext = traverseContext(context, path, params)\n                if (!targetContext) return false\n\n                const isActiveStores = [\n                    targetContext.isActive,\n                    ...((options.recursive &&\n                        targetContext.ancestors.map(ctx => ctx.isActive)) ||\n                        []),\n                ]\n                const isActive = isActiveStores.map(store => get(store)).every(Boolean)\n\n                return isActive\n            })\n        }\n        // need this or we get a ctx[2] is not a function error\n        refresh()\n\n        return router.activeRoute.subscribe(\n            () => router.ready().then(refresh),\n            invalidate,\n        )\n    },\n}\n\n/**\n *\n * @param {RenderContext} renderContext\n * @returns\n */\nexport const isActiveUrl = renderContext => {\n    const { router, fragment } = renderContext\n\n    /** @type {IsActive} */\n    return (path, params = {}, options = {}) => {\n        const { recursive } = { recursive: true, ...options }\n        const route = router.activeRoute.get()\n\n        const chainOptions = {\n            rootNode: router.rootNode,\n            allowDynamic: false,\n            includeIndex: !recursive,\n        }\n\n        const allWantedParamsAreInActiveChain = Object.entries(params).every(\n            ([key, value]) => route.params[key] === value,\n        )\n        if (!allWantedParamsAreInActiveChain) return false\n\n        const wantedNode = path.startsWith('.')\n            ? fragment.node.traverse(path)\n            : router.rootNode.getChainTo(path, chainOptions).pop().node\n\n        const actNodes = [...route.fragments.map(fragment => fragment.node)]\n\n        return actNodes.includes(wantedNode)\n    }\n}\n/**\n * @param {string} path\n */\nexport const resolveNode = path => {\n    const { node } = contexts.fragment\n    const { router } = contexts\n    return traverseNode(node, path, router)\n}\n\n/**\n *\n * @param {RNodeRuntime} node\n * @param {string} path\n * @param {Router} router\n * @returns {RNodeRuntime}\n */\nexport const traverseNode = (node, path, router) =>\n    path.startsWith('/') ? router.rootNode.traverse(`.${path}`) : node.traverse(path)\n\n/**\n * @template {Function} T\n * @template U\n * @param {T} callback\n * @returns {Readable<T extends () => infer U ? U : any>}\n */\nconst pseudoStore = callback => ({\n    subscribe: run => {\n        run(callback())\n        return () => {}\n    },\n})\n\nexport const context = pseudoStore(() => contexts.fragment)\n\nexport const node = pseudoStore(() => get(context).node)\n\nexport const meta = pseudoStore(() => get(node).meta)\n\n/** @type {Readable<Route>} */\nexport const activeRoute = {\n    subscribe: run => contexts.router.activeRoute.subscribe(run),\n}\n\n/** @type {Readable<Route>} */\nexport const pendingRoute = {\n    subscribe: run => contexts.router.pendingRoute.subscribe(run),\n}\n\n/**@type {Readable<function(AfterUrlChangeCallback):any>} */\nexport const afterUrlChange = {\n    subscribe: run => {\n        const hookHandles = []\n        /**\n         * @param {AfterUrlChangeCallback} callback\n         */\n        const register = callback => {\n            const unhook = contexts.router.afterUrlChange(callback)\n            hookHandles.push(unhook)\n            return unhook\n        }\n        run(register)\n        return () => hookHandles.map(unhook => unhook())\n    },\n}\n\n/**@type {Readable<function(BeforeUrlChangeCallback):any>} */\nexport const beforeUrlChange = {\n    subscribe: run => {\n        const hookHandles = []\n        /**\n         * @param {BeforeUrlChangeCallback} callback\n         */\n        const register = callback => {\n            const unhook = contexts.router.beforeUrlChange(callback)\n            hookHandles.push(unhook)\n            return unhook\n        }\n        run(register)\n        return () => hookHandles.map(unhook => unhook())\n    },\n}\n", "export const spreadsLast = node => (node.name.match(/\\[\\.\\.\\.(.+)\\]/) ? 1 : -1)\n\n/**\n *\n * @param {RouteFragment[]} routeFragments\n * @returns {RNodeRuntime}\n */\nexport const getNearestAncestorNodeWithSpreadParam = routeFragments => {\n    for (const fragment of [...routeFragments].reverse()) {\n        for (const node of fragment.node.parent?.navigableChildren || []) {\n            const match = node.name.match(/\\[\\.\\.\\.(.+)\\]/)\n            if (match) return node\n        }\n    }\n}\n\nexport const getUrlFragments = url =>\n    url\n        .replace(/[?#].+/, '') // strip the search and hash query\n        .replace(/\\/$/, '') // strip trailing slash\n        .split('/')\n        .slice(1) // skip the first fragment since it will always be empty\n\nexport const indexOfNode = (fragments, node) =>\n    fragments.findIndex(fragment => fragment.node === node)\n\n/**\n * @template {string|string[]} T\n * @param {T} strOrArr\n * @returns {T}\n */\nconst uriDecodeStringOrArray = strOrArr =>\n    strOrArr instanceof Array\n        ? /** @type {T} */ (strOrArr.map(decodeURI))\n        : /** @type {T} */ (decodeURI(strOrArr))\n\n/**\n * @template {Object<string, string|string[]>} T\n * @param {T} obj\n * @returns {T}\n */\nexport const URIDecodeObject = obj =>\n    Object.entries(obj).reduce(\n        (_return, [key, value]) => ({\n            ..._return,\n            [key]: uriDecodeStringOrArray(value),\n        }),\n        /** @type {T} */ ({}),\n    )\n\n/**\n * @template P\n * @typedef {Object} LoadCacheFetchOptions\n * @prop {(() => Promise<P>) |( ()=> P)} hydrate\n * @prop {(res:P) => Boolean|Number} [clear]\n **/\n\n/**\n * @template P\n * LoadCache is a simple class implementation for caching Route.load\n */\nexport class LoadCache {\n    constructor() {\n        /** @type {Map<string, Promise<P>|P >} */\n        this.map = new Map()\n    }\n\n    /**\n     * Fetches data for the given ID and caches it.\n     * @param {any} id\n     * @param {LoadCacheFetchOptions<P>} options\n     * @returns {Promise<P>}\n     */\n    async fetch(id, options) {\n        if (!this.map.has(id)) this.map.set(id, options.hydrate())\n\n        this._handlePromise(id, options)\n\n        return this.map.get(id)\n    }\n    /**\n     * Handles the Promise resolution, cache expiration, and cache clearing.\n     * @param {any} id\n     * @param {LoadCacheFetchOptions<P>} options\n     */\n    async _handlePromise(id, options) {\n        const value = await this.map.get(id)\n        const clear = options.clear?.(value)\n        if (typeof clear === 'number') setTimeout(() => this.map.delete(id), clear)\n        else if (clear) this.map.delete(id)\n    }\n}\n", "import { URIDecodeObject } from './utils.js'\nimport { createDeferredPromise } from '../utils/index.js'\n\nexport class RouteFragment {\n    /**\n     * @param {Route} route the route this fragment belongs to\n     * @param {RNodeRuntime} node the node that corresponds to the fragment\n     * @param {String=} urlFragment a fragment of the url (fragments = url.split('/'))\n     * @param {Object<string, any>=} params\n     */\n    constructor(route, node, urlFragment = '', params = {}) {\n        this.route = route\n        this.node = node\n        /** @type {Partial<RoutifyLoadReturn>} */\n        this.load = undefined\n        this.urlFragment = urlFragment\n        this.params = params\n        /** @type {DeferredPromise<RenderContext>} */\n        this.renderContext = createDeferredPromise()\n        Object.defineProperty(this, 'route', { enumerable: false })\n        this.params = URIDecodeObject({ ...this.node.meta.isDefault, ...params })\n    }\n}\n", "import { createUrl } from '../helpers/index.js'\nimport { populateUrl } from '../utils/index.js'\nimport { RouteFragment } from './RouteFragment.js'\nimport { LoadCache } from './utils.js'\n\n/** @type {UrlState[]} */\nconst URL_STATES = ['pushState', 'replaceState', 'popState']\n\nconst loadCache = new LoadCache()\n\nexport class Route {\n    /** @type {RouteFragment[]} */\n    allFragments = []\n    /** @type {RouteFragment[]} only fragments with components */\n    fragments = []\n\n    /** @type {RoutifyLoadReturn} */\n    load = {\n        status: 200,\n        error: null,\n        maxage: null,\n        props: {},\n        redirect: null,\n    }\n\n    /**\n     * @param {Router} router\n     * @param {string} url\n     * @param {UrlState} mode\n     * @param {Object} state a state to attach to the route\n     */\n    constructor(router, url, mode, state = {}) {\n        this.sourceUrl = typeof url === 'string' ? new URL(url, 'http://localhost') : url\n\n        this.router = router\n        this.mode = mode\n        this.state = state\n        this.state.createdAt = new Date()\n\n        if (!router.rootNode) {\n            const err = new Error(\n                \"Can't navigate without a rootNode. Have you imported routes?\",\n            )\n            Object.assign(err, { routify: { router } })\n            throw err\n        }\n\n        if (!URL_STATES.includes(mode))\n            throw new Error('url.mode must be pushState, replaceState or popState')\n\n        this.allFragments = this._createFragments(this.sourceUrl.pathname)\n\n        this.params = { ...this.queryParams, ...this.fragmentParams }\n\n        this.fragments = this.router.transformFragments.run(this.allFragments)\n\n        this.url = this._createUrl()\n        this.log = router.log.createChild('[route]') // ROUTIFY-DEV-ONLY\n        this.log.debug('created', this) // ROUTIFY-DEV-ONLY\n    }\n\n    get fragmentParams() {\n        return this.allFragments.reduce((acc, curr) => ({ ...acc, ...curr.params }), {})\n    }\n\n    get queryParams() {\n        return this.router.queryHandler.parse(this.sourceUrl.search, this)\n    }\n\n    get leaf() {\n        return [...this.fragments].pop()\n    }\n\n    get isPendingOrPrefetch() {\n        return this === this.router.pendingRoute.get() || this.state.prefetch\n    }\n\n    async loadRoute() {\n        const pipeline = [\n            this.runBeforeUrlChangeHooks,\n            this.loadComponents,\n            this.runPreloads,\n        ]\n\n        // todo get rid of this.loaded and use loadRoute() 's promise instead\n\n        for (const pretask of pipeline) {\n            const passedPreTask = await pretask.bind(this)()\n            // if this is not the pending route\n            // or a pipeline entry failed, halt and return\n            if (!this.isPendingOrPrefetch || !passedPreTask) return false\n        }\n\n        this.log.debug('loaded route', this) // ROUTIFY-DEV-ONLY\n\n        return true\n    }\n\n    /**\n     * converts async module functions to sync functions\n     */\n    async loadComponents() {\n        this.log.debug('load components', this) // ROUTIFY-DEV-ONLY\n        const nodes = this.fragments.map(fragment => fragment.node)\n        const multiNodes = nodes\n            .map(node => node.children.find(node => node.name === '_decorator'))\n            .filter(Boolean)\n\n        await Promise.all([...nodes, ...multiNodes].map(node => node.loadModule()))\n        return true\n    }\n\n    async runPreloads() {\n        this.log.debug('run preloads', this) // ROUTIFY-DEV-ONLY\n\n        const prevRoute = this.router.activeRoute.get()\n\n        for (const [index, fragment] of this.fragments.entries()) {\n            // if something happened and this route is no longer pending, abort\n            if (!this.isPendingOrPrefetch) return false\n\n            const prevFragmentInSpot = prevRoute?.fragments[index]\n            const isSameBranch = fragment.node === prevFragmentInSpot?.node\n\n            /** @type { RoutifyLoadContext } */\n            const ctx = {\n                route: this,\n                url: createUrl(fragment, this.router),\n                prevRoute,\n                isNew: !isSameBranch,\n                fetch,\n            }\n\n            if (fragment.node.module?.load) {\n                const cacheId = JSON.stringify([this.params, fragment.node.id])\n\n                const load = await loadCache.fetch(cacheId, {\n                    hydrate: () => fragment.node.module.load(ctx),\n                    // if no expire is set clear it on load, unless it's a prefetch\n                    clear: res => res?.expire || !this.state.prefetch,\n                })\n\n                fragment.load = {\n                    ...(isSameBranch && prevFragmentInSpot.load),\n                    ...load,\n                }\n                Object.assign(this.load, fragment.load)\n\n                if (this.load.redirect && !this.state.prefetch)\n                    return this.router.url.replace(this.load.redirect, {\n                        redirectedBy: this,\n                    })\n            }\n        }\n\n        return this\n    }\n\n    async runBeforeUrlChangeHooks() {\n        return await this.router.beforeUrlChange.run({ route: this })\n    }\n\n    get meta() {\n        return this.fragments.reduce((acc, curr) => ({ ...acc, ...curr.node.meta }), {})\n    }\n\n    /**\n     * @param {RNodeRuntime} node the node that corresponds to the fragment\n     * @param {String=} urlFragment a fragment of the url (fragments = url.split('/'))\n     * @param {Object<string, any>=} params\n     */\n    createFragment(node, urlFragment = '', params = {}) {\n        return new RouteFragment(this, node, urlFragment, params)\n    }\n\n    /**\n     * creates fragments. A fragment is the section between each / in the URL\n     */\n    _createFragments(pathname) {\n        const rootNode = this.router.rootNode\n        const nodeChain = this.router.rootNode.getChainTo(pathname, {\n            rootNode,\n            allowDynamic: true,\n            includeIndex: true,\n            navigableChildrenOnly: true,\n        })\n        const fragments = nodeChain.map(nc =>\n            this.createFragment(nc.node, nc.fragment, nc.params),\n        )\n        return fragments\n    }\n\n    _createUrl() {\n        const queryStringifier = obj => this.router.queryHandler.stringify(obj, this)\n        // index 0 is the root node, which is always empty\n        const path = this.allFragments.map((f, i) => (i ? f.node.name : '')).join('/')\n        const populatedUrl = populateUrl(path, this.params, queryStringifier)\n        return populatedUrl.replace(/\\/index$/, '') + this.sourceUrl.hash\n    }\n}\n", "export class BaseReflector {\n    /** @param {Router} router */\n    constructor(router) {\n        this.router = router\n        this.log = this.router.log\n    }\n    install() {}\n    uninstall() {}\n    reflect() {}\n}\n", "import { get } from 'svelte/store'\n\n/**\n * @template {{}} T\n * @template {{}} T2\n * @param {T} receiver\n * @param  {...T2} sources\n * @return {T&Partial<T2>} //partial because we're not guaranteed that types are preserved\n */\nexport function deepAssign(receiver, ...sources) {\n    for (const source of sources) {\n        if (Array.isArray(source)) {\n            // transform receiver to an array if the source is an array\n            // @ts-ignore\n            receiver = Array.isArray(receiver) ? receiver : []\n            // @ts-ignore\n            receiver.push(...source) // @ts-ignore\n        } else\n            for (const key of Reflect.ownKeys(source)) {\n                if ([source[key], receiver[key]].every(isObjectOrArray)) {\n                    receiver[key] = deepAssign(receiver[key], source[key])\n                } else receiver[key] = source[key]\n            }\n    }\n    return receiver\n}\n\nconst isObject = v =>\n    v &&\n    typeof v === 'object' &&\n    !['Array', 'Date', 'Regexp'].includes(v.constructor?.name)\n\nexport const isObjectOrArray = v => Array.isArray(v) || isObject(v)\n\n/**\n * checks for repeating patterns to prevent infinite loops\n */\nclass RepetitionChecker {\n    history = []\n    /**\n     * Pushes an entry to history. If the entry already exists, it checks\n     * if the history between previously added entry and current entry is a\n     * repetition. If so, it returns the repetition.\n     * @param {any} entry\n     * @returns {false|any[]}\n     */\n    pushAndCheck = entry => {\n        const { history } = this\n        const prevIndexCursor = history.lastIndexOf(entry) + 1\n        history.push(entry)\n        if (prevIndexCursor) {\n            const lastIndexCursor = history.length\n            const sliceLength = lastIndexCursor - prevIndexCursor\n            const slice1 = history.slice(prevIndexCursor - sliceLength, prevIndexCursor)\n            const slice2 = history.slice(prevIndexCursor)\n            if (JSON.stringify(slice1) === JSON.stringify(slice2)) return slice2\n        }\n        return false\n    }\n}\n\n/**\n * @param {RoutifyBuildtimePlugin[]} plugins\n * @returns {RoutifyBuildtimePlugin[]}\n */\nexport const normalizePlugins = plugins =>\n    // clone, flatten and normalize\n    plugins.flat().map(plugin => ({\n        ...plugin,\n        before: [].concat(plugin.before).filter(Boolean), //convert to, or keep as array\n        after: [].concat(plugin.after).filter(Boolean), //convert to, or keep as array\n    }))\n\n/**\n * @param {RoutifyBuildtimePlugin[]} plugins\n * @returns {RoutifyBuildtimePlugin[]}\n */\nexport function sortPlugins(plugins) {\n    const repetitionChecker = new RepetitionChecker()\n\n    const _sort = () => {\n        plugins.some((plugin1, index1) =>\n            plugins.some((plugin2, index2) => {\n                const plugin2ShouldPrecede =\n                    plugin1.after.includes(plugin2.name) ||\n                    plugin2.before.includes(plugin1.name)\n                const plugin2DoesPrecede = index2 < index1\n                if (plugin2ShouldPrecede && !plugin2DoesPrecede) {\n                    // move plugin2 to the index of plugin1\n                    plugins.splice(index2, 1) //remove\n                    plugins.splice(index1, 0, plugin2) //insert\n\n                    // make sure we're not stuck in a loop\n                    const loop = repetitionChecker.pushAndCheck(plugin2)\n                    if (loop)\n                        // todo create loopException\n                        throw new Error(\n                            'found infinite loop in plugins. Repeating pattern:\\n' +\n                                `${loop\n                                    .map(\n                                        p =>\n                                            `${p.name} (${['before', 'after']\n                                                .map(name => `${name}: ${p[name]}`)\n                                                .join('; ')} )`,\n                                    )\n                                    .join('\\n')\n                                    .replace(/before: ;/g, '')\n                                    .replace(/after:  /g, '')\n                                    .replace(/\\( \\)/g, '')}`,\n                        )\n                    _sort()\n                    return true\n                }\n            }),\n        )\n    }\n\n    _sort()\n\n    return plugins\n}\n\n/**\n * mock routes from an object\n * @template {RoutifyBuildtime|RoutifyRuntime} T\n * @param {T} instance\n * @param {Object.<string, any>} routes\n * @example\n * mockRoutes(instance, {\n *   module: {\n *     about: {},\n *     posts: { '[slug]': {} },\n *     admin: { crud: {}, users: {} },\n *   },\n * })\n */\nexport const mockRoutes = (instance, routes) => {\n    const rootNode = instance.createNode('module')\n    const queue = [{ parent: rootNode, children: routes.module }]\n\n    while (queue.length) {\n        const job = queue.shift()\n        Object.entries(job.children).forEach(([name, routes]) => {\n            const parent = job.parent.createChild(name, '')\n            parent.meta.name = name\n            if (name.startsWith('[')) parent.meta.dynamic = true\n            if (name.startsWith('[...')) parent.meta.dynamicSpread = true\n            queue.push({\n                /** @ts-ignore our mocked route is lacking a lot of properties */\n                parent,\n                children: routes,\n            })\n        })\n    }\n\n    return rootNode\n}\n\n/**\n * Adds props to a Svelte component\n * @example\n * const MyCompWithProps = addPropsToComp(MyComp, {msg: 'hello world'})\n * @template {typeof import('svelte/internal').SvelteComponentDev} Component\n * @param {Component} Comp\n * @param {Object<string, any>} props\n * @returns {Component}\n */\nexport const addPropsToComp = (Comp, props) => {\n    const ssrWrapper = (Comp, props) => ({\n        ...Comp,\n        $$render: (...params) => {\n            params[1] = { ...params[1], ...props }\n            return Comp.$$render(...params)\n        },\n    })\n\n    const domWrapper = (Comp, props) =>\n        function (options) {\n            return new Comp({ ...options, props: { ...options.props, ...props } })\n        }\n\n    const wrapper = Comp['$$render'] ? ssrWrapper : domWrapper\n\n    return wrapper(Comp, props)\n}\n\n// todo fix types below. Callback param is any, but should be V. Probably needs overloading\n\n/**\n * Returns store value on the next store update.\n * If wanted is specified, the value will only be returned once the value matches.\n * Wanted can be a callback.\n * @example\n * // returns the next value from clock\n * const hour = await next(clock)\n * @example\n * // resolves when clock is 5\n * await next(clock, 5)\n * @example\n * // resolves when clock is 5\n * const hour = await next(clock, val => val === 5)\n * @template {import('svelte/store').Readable<V>} T\n * @template V\n * @param {T} store\n * @param {((wanted: V)=>Boolean)|V=} wanted\n * @param {boolean=} strict use === matching instead of == for the wanted value\n * @returns {Promise<V>}\n */\nexport const next = (store, wanted, strict) =>\n    new Promise(resolve => {\n        let unsub\n        unsub = store.subscribe(value => {\n            // skip the first initial return\n            if (!unsub) return\n            if (\n                typeof wanted === 'undefined' ||\n                value === wanted ||\n                (value == wanted && !strict) ||\n                (typeof wanted === 'function' && /** @type {function} */ (wanted)(value))\n            ) {\n                resolve(value)\n                unsub\n            }\n        })\n    })\n\nconst createThrottle = () => {\n    const map = new Map()\n\n    const throttle = async fn => {\n        const fnStr = fn.toString()\n        map.set(fnStr, map.get(fnStr) || { isRunning: false, runAgain: false })\n        const s = map.get(fnStr)\n\n        if (s.isRunning) s.runAgain = true\n        else {\n            s.isRunning = true\n            await fn()\n            s.isRunning = false\n            if (s.runAgain) {\n                s.runAgain = false\n                await throttle(fn)\n            }\n        }\n    }\n    return throttle\n}\n\nexport const throttle = createThrottle()\n\nexport const lazySet = (store, value) =>\n    JSON.stringify(get(store)) !== JSON.stringify(value) && store.set(value)\n\nexport const jsonClone = obj => JSON.parse(JSON.stringify(obj))\n\n/**\n * @template V\n * @param {()=>V} callback\n * @param {any} collection\n * @param {any} id\n * @param {Object<any, Object<any, V>>} store\n * @returns {V}\n */\nexport const getCachedData = (callback, collection, id, store = {}) => {\n    store[collection] = store[collection] || {}\n    if (!store[collection][id]) store[collection][id] = callback()\n    return store[collection][id]\n}\n\n/**\n * Initializes a caching mechanism based on a unique identifier generator.\n *\n * @example\n * const getCurrentDate = () => new Date().toISOString().split('T')[0];\n * const dataCache = initializeCache(getCurrentDate);\n * const result1 = dataCache(() => 1);\n * const result2 = dataCache(() => 2);\n *\n * @param {() => any} idGenerator Function to generate a unique identifier for caching.\n */\nexport const initializeCache = (idGenerator, defaultContext) => {\n    const functionCache = new Map()\n\n    /**\n     * Retrieves a cached value based on the function's string representation and a unique identifier.\n     * If the value doesn't exist in cache, the callback function is invoked to generate it.\n     * @template T\n     * @param {() => T} dataProducer Function to generate the data if not already cached.\n     * @returns {T}\n     */\n    const retrieveFromCache = (dataProducer, context) => {\n        const uniqueId = idGenerator()\n\n        if (!functionCache.has(dataProducer)) {\n            functionCache.set(dataProducer, new Map())\n        }\n\n        const cache = functionCache.get(dataProducer)\n        if (!cache.has(uniqueId)) {\n            cache.set(uniqueId, dataProducer.bind(defaultContext || context || this)())\n        }\n        return cache.get(uniqueId)\n    }\n    retrieveFromCache.storage = functionCache\n    return retrieveFromCache\n}\n", "import { initializeCache } from './utils.js'\n\n/** @template {import('./Routify').Routify<any>} InstanceType */\nexport class RNode {\n    /** @type {InstanceType['NodeType']} */\n    parent\n\n    /** @type {Object.<string, any>} */\n    meta = {}\n\n    /** @type {String} */\n    id\n\n    /**\n     * @param {string} name\n     * @param {ReservedCmpProps|string} module\n     * @param {InstanceType} instance\n     */\n    constructor(name, module, instance) {\n        /** @type {InstanceType} */\n        this.instance = instance\n        this.name = name || ''\n\n        instance.nodeIndex.push(this)\n        this.module = module\n\n        // tie the name to the cache, so that when the name changes, the cache is invalidated\n        this._cacheByName = initializeCache(() => this.name, this)\n\n        Object.defineProperty(this, '_cacheByName', { enumerable: false })\n        Object.defineProperty(this, 'instance', { enumerable: false })\n        Object.defineProperty(this, 'parent', { enumerable: false })\n    }\n\n    /** @param {InstanceType['NodeConstructor']['prototype']} child */\n    appendChild(child) {\n        if (child.instance) child.parent = this\n    }\n\n    /**\n     * Creates a new child node\n     * Same as `node.appendChild(instance.createNode('my-node'))`\n     * @param {string} name\n     */\n    createChild(name, module) {\n        const node = /** @type {InstanceType['NodeConstructor']['prototype']} */ (\n            this.instance.createNode(name, module)\n        )\n        this.appendChild(node)\n        return node\n    }\n\n    /** @type {InstanceType['NodeConstructor']['prototype'][]} */\n    get descendants() {\n        return this.instance.nodeIndex.filter(node =>\n            node.ancestors.find(n => n === this),\n        )\n    }\n\n    remove() {\n        const { nodeIndex } = this.instance\n        const index = nodeIndex.findIndex(node => node === this)\n        nodeIndex.splice(index, 1)\n    }\n\n    /** @type {InstanceType['NodeConstructor']['prototype'][]} */\n    get ancestors() {\n        let node = this\n        const ancestors = []\n        while ((node = node.parent)) ancestors.push(node)\n\n        return ancestors\n    }\n\n    /** @type {InstanceType['NodeConstructor']['prototype']} */\n    get root() {\n        let node = this\n        while (node.parent) node = node.parent\n        return node\n    }\n\n    get isRoot() {\n        return this === this.root\n    }\n\n    /** @type {InstanceType['NodeType'][]} */\n    get children() {\n        return this.instance.nodeIndex\n            .filter(node => node.parent === this)\n            .sort((prev, curr) => (prev.meta.order || 0) - (curr.meta.order || 0))\n    }\n\n    get navigableChildren() {\n        return this.children.filter(node => !node.meta.noRoute)\n    }\n\n    get linkableChildren() {\n        return this.navigableChildren.filter(node => node.meta.order != false)\n    }\n\n    /** @returns {number} */\n    get level() {\n        return (this.parent?.level || 0) + 1\n    }\n\n    _getRegex() {\n        return this.instance.utils.getRegexFromName(this.name)\n    }\n    get regex() {\n        return this._cacheByName(this._getRegex)\n    }\n\n    _getParamKeys() {\n        return this.instance.utils.getFieldsFromName(this.name)\n    }\n    get paramKeys() {\n        return this._cacheByName(this._getParamKeys)\n    }\n\n    _getSpecificity() {\n        return [this.name.replace(/\\[.+?\\]/g, '').length, this.paramKeys.length]\n    }\n    get specificity() {\n        return this._cacheByName(this._getSpecificity)\n    }\n\n    /**\n     * returns parameters for a given urlFragment\n     * @param {string} urlFragment\n     */\n    getParams(urlFragment) {\n        // if the path is '.' or '..' return nothing\n        if (urlFragment.match(/^\\.+$/)) return {}\n\n        const values = this.instance.utils.getValuesFromPath(this.regex, urlFragment)\n        return this.instance.utils.mapFieldsWithValues(this.paramKeys, values)\n    }\n\n    /**\n     * resolve a node relative to this node\n     * @param {string} path\n     * @param {boolean} allowDynamic allow traversing dynamic components (parameterized)\n     * @param {boolean} includeIndex\n     * @param {boolean} silent don't throw errors for 404s\n     * @returns {this}\n     */\n    traverse(path, allowDynamic = false, includeIndex = false, silent = false) {\n        const isNamed = !path.startsWith('/') && !path.startsWith('.')\n        return isNamed\n            ? this.root.instance.nodeIndex.find(node => node.meta.name === path)\n            : this.getChainTo(path, { allowDynamic, includeIndex, silent })?.pop().node\n    }\n\n    /**\n     * Returns an array of steps to reach a path. Each path contains a node and params\n     * @param {string} path\n     * @param {object} [options]\n     * @param {boolean} [options.allowDynamic=true]\n     * @param {boolean} [options.includeIndex=true]\n     * @param {boolean} [options.navigableChildrenOnly=false]\n     * @param {boolean} [options.silent=false] don't throw errors for 404s\n     * @param {this} [options.rootNode]\n     \n     */\n    getChainTo(path, options) {\n        options = {\n            ...{ allowDynamic: true, includeIndex: true, navigableChildrenOnly: false },\n            ...options,\n        }\n\n        const targetChildren = options.navigableChildrenOnly\n            ? 'navigableChildren'\n            : 'children'\n\n        /** @type {InstanceType['NodeConstructor']['prototype']} */\n        const originNode = path.startsWith('/') ? options.rootNode || this.root : this\n\n        /**\n         * The path from current node to the leaf page, eg. \"blog\", \"posts\", \"some-story\", \"comments\", \"123\"\n         * @type {string[]}\n         * */\n        const stepsToLeaf = path\n            .split('/')\n            .filter(snip => snip !== '.')\n            .filter(Boolean)\n\n        let currentNodeStep = {\n            node: originNode,\n            stepsToLeaf,\n            params: {},\n            fragment: '',\n        }\n        const nodeSteps = [currentNodeStep]\n\n        let inStaticDeadEnd = false // if true, don't look for a static component\n        let inDynamicDeadEnd = false // if true, don't look for a dynamic component\n\n        while (currentNodeStep.stepsToLeaf.length) {\n            const [nextStep, ...restSteps] = currentNodeStep.stepsToLeaf\n\n            const nextNode =\n                nextStep === '..'\n                    ? currentNodeStep.node.parent\n                    : (!inStaticDeadEnd &&\n                          currentNodeStep.node[targetChildren].find(\n                              node => node.name === nextStep,\n                          )) ||\n                      (options.allowDynamic &&\n                          !inDynamicDeadEnd &&\n                          [...currentNodeStep.node[targetChildren]]\n                              .sort(\n                                  (a, b) =>\n                                      // sort by static specificity, then dynamic specificity\n                                      b.specificity[0] - a.specificity[0] ||\n                                      b.specificity[1] - a.specificity[1],\n                              )\n                              .filter(({ meta }) => meta.dynamic && !meta.dynamicSpread)\n                              // todo add dynamicSpread nodes to specificity calculation\n                              .find(node => node.regex.test(nextStep))) ||\n                      (options.allowDynamic &&\n                          currentNodeStep.node[targetChildren].find(\n                              node => node.meta.dynamicSpread,\n                          ))\n\n            if (nextNode) {\n                // we found a node that matches the next url fragment\n                // console.log(nodeSteps.map(ns => ns.node.name).join('/') + '/' + nextNode.name)\n\n                const nodeStep = {\n                    node: nextNode,\n                    params: nextNode.meta.dynamicSpread\n                        ? [nextStep]\n                        : nextNode.meta.dynamic\n                        ? nextNode.getParams(nextStep)\n                        : {},\n                    stepsToLeaf: restSteps,\n                    fragment: nextStep,\n                }\n                currentNodeStep = nodeStep\n                nodeSteps.push(nodeStep)\n            } else if (!options.allowDynamic && options.silent) return null\n            else if (!options.allowDynamic && !options.silent)\n                throw new Error(\n                    `${nodeSteps\n                        .map(ns => ns.node.name || 'root')\n                        .join('/')} could not travel to ${nextStep}`,\n                )\n            else if (currentNodeStep.node.meta.dynamicSpread) {\n                // we didn't find a node matching the next step, but we're inside a dynamic spread parameter node, so we'll use that\n                currentNodeStep.params.push(nextStep)\n                currentNodeStep.fragment += `/${nextStep}`\n                currentNodeStep.stepsToLeaf.shift()\n                inDynamicDeadEnd = false\n                inStaticDeadEnd = false\n            } else {\n                // we didn't find a node and the current node doesn't have spread parameters. Let's backtrack.\n                // console.log(`backtracking from ${nodeSteps.map(ns => ns.node.name).join('/')}`)\n                nodeSteps.pop()\n                currentNodeStep = [...nodeSteps].pop()\n                inDynamicDeadEnd = inStaticDeadEnd\n                inStaticDeadEnd = true\n                if (!currentNodeStep && options.silent) return null\n                else if (!currentNodeStep && !options.silent)\n                    throw new Error(`Could not find path \"${path}\" from ${this.name}`)\n            }\n        }\n\n        // append an index component if one exists\n        try {\n            const indexNode =\n                options.includeIndex &&\n                currentNodeStep.node[targetChildren].find(\n                    node => node.name === 'index' || node.meta.isDefault,\n                )\n\n            if (indexNode)\n                nodeSteps.push({\n                    node: indexNode,\n                    stepsToLeaf: [],\n                    params: {},\n                    fragment: '',\n                })\n        } catch (err) {}\n\n        // normalize params so that spread parameters get a key\n        nodeSteps.forEach(ns => {\n            ns.params = Array.isArray(ns.params)\n                ? { [ns.node.name.replace(/\\[\\.\\.\\.(.+)\\]/, '$1')]: ns.params }\n                : ns.params\n        })\n\n        return nodeSteps\n    }\n\n    getChainToNode(node) {\n        const chain = []\n        do {\n            chain.unshift(node)\n            if (node === this) return chain\n        } while ((node = node.parent))\n    }\n\n    /** @returns {InstanceType['NodeConstructor']['prototype']} */\n    toJSON() {\n        return {\n            ...this,\n            children: [...this.children],\n        }\n    }\n\n    /** @returns {string} */\n    get path() {\n        return (\n            '/' +\n            [this, ...this.ancestors]\n                .reverse()\n                .map(node => node.name)\n                .filter(Boolean)\n                .join('/')\n        )\n    }\n}\n", "<script>\n    import {\n        getRoutifyFragmentContext,\n        setRoutifyFragmentContext,\n    } from '../utils/index.js'\n    export let node\n    export let passthrough\n\n    const context = { ...getRoutifyFragmentContext(), node }\n    setRoutifyFragmentContext(context)\n\n    let Component = node.module?.default\n    if (!Component && node.asyncModule)\n        node.asyncModule().then(r => (Component = r.default))\n</script>\n\n{#if Component}\n    <svelte:component this={Component} {...passthrough} {context}>\n        <slot />\n    </svelte:component>\n{:else}\n    <slot />\n{/if}\n", "import { RNode } from '../../common/RNode.js'\nimport Node from './Node.svelte'\nimport { RoutifyRuntime } from './RoutifyRuntime.js'\nimport { getRoutifyFragmentContext } from '../utils/index.js'\n\n/**\n * @extends {RNode<RoutifyRuntime>}\n */\nexport class RNodeRuntime extends RNode {\n    /** @type {LoadSvelteModule} */\n    asyncModule\n\n    /**\n     * @param {string} name\n     * @param {ReservedCmpProps} module\n     * @param {RoutifyRuntime} instance\n     * @param {LoadSvelteModule=} asyncModule\n     */\n    constructor(name, module, instance, asyncModule) {\n        super(name, module, instance)\n\n        /** @type {ReservedCmpProps} */\n        this.module = module\n\n        /** @type {LoadSvelteModule} */\n        this.asyncModule = asyncModule\n    }\n\n    // TODO DEPRECATE\n    get pages() {\n        console.log('DEPRECATED node.pages: use .linkableChildren instead') // ROUTIFY-DEV-ONLY\n        return this.pagesWithIndex.filter(node => node.name !== 'index')\n    }\n\n    /**\n     * Returns the title of the node. Looks for meta.title, falls back to capitalized name\n     * Can be transformed with the router transformTitle hook\n     * @returns {string}\n     */\n    get title() {\n        const getPrettyName = () =>\n            this.name.replace(/-/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())\n        const getTitle = () => this.meta.title || getPrettyName()\n\n        return getTitle()\n    }\n\n    // TODO DEPRECATE\n    get pagesWithIndex() {\n        console.log('DEPRECATED node.pagesWithIndex: use .linkableChildren instead') // ROUTIFY-DEV-ONLY\n        return this.children\n            .filter(node => !node.meta.fallback)\n            .filter(node => !node.name.startsWith('_'))\n            .filter(node => !node.name.includes('['))\n            .filter(node => !(node.meta?.order === false))\n    }\n\n    get hasComponent() {\n        return !!(this.module || this.asyncModule)\n    }\n\n    /** @ts-ignore SvelteComponentConstructor is only available in VSCode */\n    /** @returns {Promise<SvelteComponentDev>} */\n    async getRawComponent() {\n        const module = await this.loadModule()\n        return module?.default\n    }\n\n    async loadModule() {\n        if (!this.module && this.asyncModule) {\n            let childPromises = []\n            // if bundling or SSR, load children too\n            if (this.meta.bundle || typeof window === 'undefined')\n                childPromises = this.navigableChildren.map(c => c.loadModule())\n            ;[this.module] = await Promise.all([this.asyncModule(), ...childPromises])\n        }\n        return this.module\n    }\n\n    /**\n     * Returns in a sync/async component in a synchronous wrapper\n     * @returns {() => Node}\n     **/\n    get component() {\n        const node = this\n\n        return function (options) {\n            options.props = {\n                ...options.props,\n                passthrough: options.props,\n                node,\n            }\n            return new Node({ ...options })\n        }\n    }\n\n    /**\n     * @param {object} snapshotRoot\n     */\n    importTree = snapshotRoot => {\n        const queue = [[this, snapshotRoot]]\n\n        while (queue.length) {\n            const [node, snapshot] = queue.pop()\n            const { children, ...nodeSnapshot } = snapshot\n            Object.assign(node, nodeSnapshot)\n\n            // queue children\n            for (const childSnapshot of children) {\n                const childNode = node.createChild(\n                    snapshot.name || snapshot.rootName || '',\n                )\n                queue.push([childNode, childSnapshot])\n            }\n        }\n        return this\n    }\n\n    get _fallback() {\n        return this.children.find(node => node.meta.fallback) || this.parent?._fallback\n    }\n}\n", "const defaultRe = /\\[(.+?)\\]/gm // matches [string]\nexport class UrlParamUtils {\n    constructor(RE = defaultRe) {\n        this.RE = RE\n    }\n\n    /**\n     * returns [\"slug\", \"id\"] from \"my[slug]and[id]\"\n     * @param {string} name\n     * @returns {string[]}\n     */\n    getFieldsFromName = name => [...name.matchAll(this.RE)].map(v => v[1])\n\n    /**\n     * converts \"my[slug]and[id]\" to /my(.+)and(.+)/gm\n     * @param {string} name\n     * @returns {RegExp}\n     */\n    getRegexFromName = name => new RegExp('^' + name.replace(this.RE, '(.+)') + '$')\n\n    /**\n     * returns an array of values matching a regular expression and path\n     * @param {RegExp} re\n     * @param {string} path\n     * @returns {string[]}\n     */\n    getValuesFromPath = (re, path) => (path.match(re) || []).slice(1)\n\n    /**\n     * converts (['a', 'b', 'c'], [1, 2, 3]) to {a: 1, b: 2, c: 3}\n     * @param {string[]} fields\n     * @param {string[]} values\n     * @returns\n     */\n    mapFieldsWithValues = (fields, values) =>\n        this.haveEqualLength(fields, values) &&\n        fields.reduce((map, field, index) => {\n            map[field] = values[index]\n            return map\n        }, {})\n\n    haveEqualLength = (fields, values) => {\n        if (fields.length !== values.length)\n            throw new Error(\n                'fields and values should be of same length' +\n                    `\\nfields: ${JSON.stringify(fields)}` +\n                    `\\nvalues: ${JSON.stringify(values)}`,\n            )\n        return true\n    }\n}\n", "import { UrlParamUtils } from '../runtime/Instance/UrlParamUtils.js'\nimport { RNode } from './RNode.js'\n\n/**\n * @template {typeof RNode<any>} NodeConstructor\n */\nexport class Routify {\n    /** @type {typeof RNode<any>} */\n    NodeConstructor\n\n    /** @type {NodeConstructor['prototype']} */\n    NodeType\n\n    /** @type {NodeConstructor['prototype'][]} */\n    nodeIndex = []\n\n    /** @type {Object<string, NodeConstructor['prototype']>} */\n    rootNodes = {}\n\n    utils = new UrlParamUtils()\n\n    /**\n     * @param {string=} name relative path for the node\n     * @param {any|string=} module svelte component\n     * @returns {this['NodeType']}\n     */\n    createNode(name, module) {\n        return new this.NodeConstructor(name, module, this)\n    }\n}\n", "import { RNodeRuntime } from './RNodeRuntime.js'\nimport { appInstance } from '../Global/Global.js'\nimport { Routify } from '../../common/Routify.js'\n\n/**\n * @extends {Routify<typeof RNodeRuntime>}\n */\nexport class RoutifyRuntime extends Routify {\n    NodeConstructor = RNodeRuntime\n    mode = 'runtime'\n\n    /**@type {Router[]} routers this instance belongs to */\n    routers = []\n\n    /** @type {Object<string, RNodeRuntime>} */\n    rootNodes = {}\n\n    constructor(options) {\n        super()\n\n        this.options = options\n        if (options.routes) {\n            this.rootNodes[options.routes.rootName || 'unnamed'] = this.createNode(\n                options.routes.rootName,\n            ).importTree(options.routes)\n        }\n        this.global = appInstance.register(this)\n        Object.defineProperty(this, 'routers', { enumerable: false })\n        this.log = this.global.log\n    }\n}\n", "/**\n * @template {function} CB\n * @param {CB} cb\n * @returns {CB}\n */\nexport const runOnce = (cb) => {\n  let hasRun;\n\n  /** @type {unknown} */\n  const wrapper = (...params) => {\n    if (hasRun) return;\n    hasRun = true;\n    return cb(...params);\n  };\n\n  return /** @type {CB} */ (wrapper);\n};\n", "/**\n * @template H\n * @callback AddHookToCollection\n * @param {H} hook\n * @returns {function} unhook\n **/\n\nimport { runOnce } from \"./util.mjs\";\n\n/**\n * @template H\n * @typedef {AddHookToCollection<H> & HooksCollectionProps<H>} HooksCollection\n */\n\n/**\n * @template H hook\n * @typedef {Object} HooksCollectionProps\n * @prop {H} run\n * @prop {H} runOnce\n * @prop {H[]} hooks\n */\n\n/**\n * @template  V\n * @callback Runner\n * @param {HookCb<V>[]} value\n * @param  {...any} rest\n */\n\n/**\n * @template T\n * @callback HookCb\n * @param {T} value\n * @param {...any} rest\n */\n\n/**\n * creates a hook collection\n * @template T\n * @param {Runner<T>} runner\n * @return {HooksCollection<HookCb<T>>}\n * @example\n * const hooksCollection = createHook()\n * const unhookFn = hooksCollection(x => console.log('hello', x))\n * const unhookFn2 = hooksCollection(x => console.log('goodbye', x))\n *\n * // call hooks\n * hooksCollection.hooks.forEach(hook => hook('Jake'))\n * // logs \"hello Jake\" and \"goodbye Jake\"\n *\n * // unregister\n * unhookFn()\n * unhookFn2()\n */\nconst createHooksCollection = (runner) => {\n  /** @type {HookCb<T>[]} */\n  const hooks = [];\n\n  /**\n   *@type {HooksCollection<HookCb<T>>}\n   */\n  const hooksCollection = (hook) => {\n    hooks.push(hook);\n    return () => hooks.splice(hooks.indexOf(hook), 1);\n  };\n\n  hooksCollection.hooks = hooks;\n  hooksCollection.run = runner(hooks);\n  hooksCollection.runOnce = runOnce(runner(hooks));\n\n  return hooksCollection;\n};\n\n/**\n * @template P\n * @typedef {HooksCollection<(pri: P, ...rest)=>P>} CollectionSync\n */\n/**\n * @template P\n * @typedef {HooksCollection<(pri: P, ...rest)=>P|Promise<P>>} CollectionAsync\n */\n/**\n * @template P\n * @typedef {HooksCollection<((pri: P, ...rest)=>void)>} CollectionSyncVoid\n */\n/**\n * @template P\n * @typedef {HooksCollection<(pri: P, ...rest)=>void|Promise<void>>} CollectionAsyncVoid\n */\n\n/**\n * @template T\n * @param {T=} type\n * @returns {HooksCollection<T>}\n */\nexport const createPipelineCollection = (type) =>\n  // @ts-ignore\n  createHooksCollection(\n    (hooks) =>\n      (value, ...rest) =>\n        hooks.reduce(\n          (pipedValue, hook) =>\n            pipedValue?.then ? pipedValue.then((r) => hook(r, ...rest)) : hook(pipedValue, ...rest),\n          value\n        )\n  );\n\n/**\n * @template T\n * @param {T=} type\n * @returns {CollectionSyncVoid<T>|CollectionAsyncVoid<T>}\n */\nexport const createSequenceHooksCollection = (type) =>\n  createHooksCollection(\n    (hooks) =>\n      (value, ...rest) =>\n        hooks.reduce(\n          (last, hook) => (last?.then ? last.then((_) => hook(value, ...rest)) : hook(value, ...rest)),\n          value\n        )\n  );\n\n/**\n * @template T\n * @param {T=} type\n * @returns {CollectionSyncVoid<T>|CollectionAsyncVoid<T>}\n */\nexport const createParallelHooksCollection = (type) =>\n  createHooksCollection(\n    (hooks) =>\n      (value, ...rest) =>\n        Promise.all(hooks.map((hook) => hook(value, ...rest))).then((r) => value)\n  );\n\n/**\n * @template T\n * @param {T=} type\n * @returns {CollectionSync<T>|CollectionAsync<T>}\n */\nexport const createGuardsCollection = (type) =>\n  // @ts-ignore\n  createHooksCollection(\n    (hooks) =>\n      (value, ...rest) =>\n        hooks.reduce(\n          (pipedValue, hook) =>\n            pipedValue?.then ? pipedValue.then((r) => r && hook(value, ...rest)) : pipedValue && hook(value, ...rest),\n          value || true\n        )\n  );\n", "import { createSequenceHooksCollection } from 'hookar'\nimport { get } from 'svelte/store'\nimport { urlFromAddress } from '../../utils/index.js'\nimport { BaseReflector } from './ReflectorBase.js'\n\nexport class AddressReflector extends BaseReflector {\n    /** @param {Router} router */\n    constructor(router) {\n        super(router)\n        const { instance, urlRewrites } = router\n        const { urlFromBrowser, browserAdapter } = instance.global\n\n        if (!history['onPushstate']) {\n            this.log.debug('polyfill history hooks') // ROUTIFY-DEV-ONLY\n            polyfillHistory()\n        }\n\n        /** @param {('push'|'replace')} method */\n        const createStateEventHandler = method => {\n            return function (data, title, url) {\n                const routerName = data?.routify?.router ?? false\n\n                if (routerName === false) url = browserAdapter.toRouter(url, router)\n                else if (routerName !== router.name) return false\n                for (const rewrite of urlRewrites)\n                    url = rewrite.toInternal(url, { router })\n                router.url[method](url)\n            }\n        }\n\n        this.absorb = () => router.url.replace(urlFromBrowser(router))\n        this._pushstateHandler = createStateEventHandler('push')\n        this._replacestateHandler = createStateEventHandler('replace')\n        this._popstateHandler = () => router.url.pop(urlFromBrowser(router))\n    }\n\n    install() {\n        this.hooks = [\n            history['onPushstate'](this._pushstateHandler),\n            history['onReplacestate'](this._replacestateHandler),\n            history['onPopstate'](this._popstateHandler),\n        ]\n\n        if (!get(this.router.activeRoute)) this.absorb()\n        else this.reflect()\n    }\n\n    uninstall() {\n        this.hooks.forEach(unreg => unreg())\n        setTimeout(() => this.reflect())\n    }\n\n    reflect = () => {\n        const { mode } = get(this.router.activeRoute)\n        if (mode === 'popState') return false\n        const { routers, browserAdapter } = this.router.instance.global\n\n        const addressRouters = routers.filter(\n            router => router.urlReflector instanceof this.constructor,\n        )\n\n        const url = browserAdapter.toBrowser(addressRouters) || '/'\n\n        // ROUTIFY-DEV-ONLY-START\n        this.log.debug('pushing internal url to browser history', {\n            mode,\n            url,\n            currentBrowserUrl: urlFromAddress(),\n            currentInternalUrl: this.router.url.internal(),\n        })\n        // ROUTIFY-DEV-ONLY-END\n\n        history[`${mode}Native`]({}, '', url)\n    }\n}\n\nfunction polyfillHistory() {\n    const hooks = {\n        /** @type {import('hookar').HooksCollection<History['pushState']>} */\n        onPushstate: createSequenceHooksCollection(),\n        /** @type {import('hookar').HooksCollection<History['replaceState']>} */\n        onReplacestate: createSequenceHooksCollection(),\n        onPopstate: createSequenceHooksCollection(),\n    }\n    Object.assign(history, hooks)\n\n    // backup native methods\n    const { pushState, replaceState } = history\n    history['pushStateNative'] = pushState\n    history['replaceStateNative'] = replaceState\n\n    history.pushState = hooks.onPushstate.run\n    history.replaceState = hooks.onReplacestate.run\n    window.addEventListener('popstate', hooks.onPopstate.run)\n\n    return true\n}\n", "import { BaseReflector } from './ReflectorBase.js'\n\n// todo should these extend a base class?\n\nexport class InternalReflector extends BaseReflector {\n    install() {\n        this.router.url.replace('/')\n    }\n}\n", "// todo should be unified with build plugin namedModule\n\nconst parseModuleName = str => {\n    const matches = str.match(/^(.+?)(\\+)?$/)\n    const [, name, prepend] = matches\n    return { name, prepend }\n}\n\nconst createHandlers = (fragments, route) => {\n    const getIndexOf = fragment => fragments.indexOf(fragment)\n    const handlers = {\n        /**\n         * @param {Boolean} _bool\n         * @param {RouteFragment} fragment\n         */\n        boolean(_bool, fragment) {\n            const index = getIndexOf(fragment)\n            return handlers.number(index, fragment)\n        },\n        /**\n         * @param {Number} num\n         * @param {RouteFragment} fragment\n         */\n        number(num, fragment) {\n            const index = fragments.indexOf(fragment)\n            const start = index - num\n            fragments.splice(start, num)\n        },\n        /**\n         * @param {string} str\n         * @param {RouteFragment} fragment\n         */\n        string(str, fragment) {\n            const selfIndex = getIndexOf(fragment)\n            const precedingFragments = fragments.slice(0, selfIndex + 1)\n            /** @type {RouteFragment} */\n            let nextFragment\n\n            const { name, prepend } = parseModuleName(str)\n            while (precedingFragments.length) {\n                nextFragment = precedingFragments.pop()\n                const matchingSiblingNode = nextFragment.node.children.find(\n                    node => node.meta.moduleName === name,\n                )\n                if (matchingSiblingNode) {\n                    if (!prepend) fragments.splice(0, getIndexOf(fragment))\n                    fragments.unshift(route.createFragment(matchingSiblingNode))\n                    precedingFragments.splice(0)\n                }\n            }\n        },\n    }\n    return handlers\n}\n\n/**\n *\n * @param {ReturnType<createHandlers>} handlers\n * @returns {(fragment: RouteFragment) => void}\n */\nconst handleFragment = handlers => fragment => {\n    const { reset } = fragment.node.meta\n    if (reset) handlers[typeof reset](reset, fragment)\n}\n\n/**\n * Removes parent modules from a node\n *  @returns {RoutifyRuntimePlugin}\n **/\nexport default () => ({\n    transformFragments: _fragments => {\n        const { route } = _fragments[0]\n        const fragments = [..._fragments]\n        const handlers = createHandlers(fragments, route)\n        _fragments.forEach(handleFragment(handlers))\n        return fragments\n    },\n})\n", "/**\n * Strips trailing /index from a url\n *  @returns {RoutifyRuntimePlugin}\n **/\nexport default () => ({\n    urlRewrite: [\n        {\n            toExternal: url => url.replace(/\\/index(?=$|\\?|#)/, ''),\n            toInternal: url => url,\n        },\n    ],\n})\n", "/**\n * Finds the next scrollable ancestor of an element within a specified boundary element.\n *\n * @param {HTMLElement} element - The element to find the next scrollable ancestor of.\n * @param {HTMLElement[]} boundaryElements - The element to stop searching for ancestors at.\n * @return {HTMLElement|null} The scrollable ancestor if found, otherwise null.\n */\nexport function findNextScrollableAncestor(element, boundaryElements = []) {\n    // Define a function to check if an element can be scrolled\n    const isScrollable = elem =>\n        elem.scrollWidth > elem.clientWidth || elem.scrollHeight > elem.clientHeight\n\n    // Check if the parent element exists, is not a boundary element, and is not locked for scrolling\n    if (\n        element.parentElement &&\n        !boundaryElements.includes(element) &&\n        !element.dataset.hasOwnProperty('routifyScrollLock')\n    ) {\n        // Check if the parent element can be scrolled or if it is the document element\n        if (\n            isScrollable(element.parentElement) ||\n            element.parentElement === document.documentElement\n        ) {\n            // Return the parent element if it can be scrolled\n            return element.parentElement\n        } else {\n            // Recursively search for the next scrollable ancestor\n            return findNextScrollableAncestor(element.parentElement, boundaryElements)\n        }\n    } else {\n        // Return null if no scrollable ancestor is found\n        return null\n    }\n}\n\n// TODO move waitForScrollToComplete\n/**\n * watches an element position relative to the viewport and waits for it to stop moving.\n * @param {HTMLElement} elem\n */\nexport function waitForScrollToComplete(elem) {\n    let counter = 0\n    let lastPos = null\n\n    return new Promise(resolve => {\n        requestAnimationFrame(checkPos)\n        function checkPos() {\n            //\n            const { top, left } = elem.getBoundingClientRect()\n            const newPos = top + '/' + left\n            counter++\n            // if the position isn't moving and we've checked 3 times.\n            // We have to check 3 times to account for race conditions where the scroll is delayed.\n            if (newPos === lastPos && counter > 2) {\n                resolve()\n            } else {\n                lastPos = newPos\n                requestAnimationFrame(checkPos)\n            }\n        }\n    })\n}\n\nexport const observeDocument = (callback, runOnInit, timeout) => {\n    if (runOnInit) callback()\n\n    new ResizeObserver(() => {})\n    const observer = new MutationObserver(mutations => {\n        const mutationsHasAddedOrRemovedANode = mutations.some(\n            mutation =>\n                mutation.type === 'childList' || mutation.type === 'characterData',\n        )\n\n        if (mutationsHasAddedOrRemovedANode) callback()\n    })\n    observer.observe(document.body, {\n        childList: true,\n        subtree: true,\n        characterData: true,\n    })\n    if (timeout) setTimeout(() => observer.disconnect(), timeout)\n    return observer\n}\n\nexport const backupScrollBehavior = elem => {\n    elem.oldBehavior = elem.oldBehavior || elem.style.scrollBehavior\n}\n\nexport const restoreScrollBehavior = elem => {\n    if (elem.oldBehavior) elem.style.scrollBehavior = elem.oldBehavior\n    else elem.style.removeProperty('scroll-behavior')\n\n    delete elem.oldBehavior\n}\n\n/**\n *\n * @param {HTMLElement} elem\n * @returns\n */\nexport const getAllAncestors = elem => {\n    const ancestors = []\n    let parent = elem.parentElement\n    while (parent) {\n        ancestors.push(parent)\n        parent = parent.parentElement\n    }\n    return ancestors\n}\n", "import { resolveIfAnonFn, waitFor } from '../../utils/index.js'\nimport {\n    backupScrollBehavior,\n    getAllAncestors,\n    observeDocument,\n    restoreScrollBehavior,\n    waitForScrollToComplete,\n} from './utils.js'\n\nexport class ScrollContext {\n    /** @type {HTMLElement} */\n    elem\n\n    /** @type {RenderContext} */\n    ctx\n\n    /** @type {boolean} */\n    isInstant\n\n    /** @type {HTMLElement} */\n    scrollTarget\n\n    async getBoundary() {\n        return resolveIfAnonFn(this.ctx.scrollBoundary, [this.ctx, this.scrollTarget])\n    }\n\n    /**\n     * @param {RenderContext} context\n     */\n    constructor(context) {\n        this.ctx = context\n    }\n\n    async init() {\n        const { ctx } = this\n        const { anchor, parent } = await waitFor(ctx.elem, Boolean)\n\n        this.scrollTarget = anchor || parent\n\n        const hashElem =\n            ctx.route?.hash && globalThis.document?.getElementById(ctx.route?.hash)\n\n        this.elem = hashElem || this.scrollTarget\n\n        this.scrollToElem = ctx.isInline || ctx.route?.hash\n\n        this.isInstant = ctx.route?.state.dontsmoothscroll || !ctx.wasVisible\n    }\n\n    async handleScrollInstructions() {\n        const { elem, isInstant, ctx } = this\n        const { scrollIntoView } = ctx.inline\n\n        const ancestors = getAllAncestors(elem)\n        ancestors.forEach(backupScrollBehavior)\n\n        if (isInstant)\n            ancestors.forEach(ancestor => (ancestor.style.scrollBehavior = 'auto'))\n\n        const observer = observeDocument(() => scrollIntoView(elem, isInstant), true)\n        const timeout = isInstant ? 300 : 0\n        setTimeout(() => {\n            observer.disconnect()\n            ancestors.forEach(restoreScrollBehavior)\n        }, timeout)\n        return waitForScrollToComplete(elem)\n    }\n}\n", "/**\n * returns true if we're at the last element in the array\n * @param {ScrollContext} _scrollContext\n * @param {number} index\n * @param {ScrollContext[]} ScrollContexts\n */\nconst defaultShouldScrollCallback = (_scrollContext, index, ScrollContexts) =>\n    index === ScrollContexts.length - 1\n\nexport class ScrollQueue {\n    /** @type {ScrollContext[]} */\n    queue = []\n\n    /**\n     * Adds an element to the queue with its respective callback function.\n     * @param {ScrollContext} scrollContext\n     */\n    push(scrollContext) {\n        // empty queue if we're on a new route\n        if (scrollContext.ctx.route != this.queue[0]?.ctx.route) this.queue = []\n\n        this.queue.push(scrollContext)\n    }\n\n    /**\n     * Processes the queue of elements and callbacks to execute them sequentially.\n     * @return {Promise<void>} A promise that resolves when the entire queue has been processed.\n     */\n    async processQueue() {\n        // filter the queue so only shouldScroll elements and the last element are left\n        this.queue = this.queue.filter((scrollContext, index, arr) =>\n            scrollContext.ctx.inline.shouldScroll(\n                scrollContext,\n                index,\n                arr,\n                defaultShouldScrollCallback,\n            ),\n        )\n\n        while (this.queue.length) {\n            const scrollContext = this.queue.shift()\n            await scrollContext.handleScrollInstructions()\n        }\n    }\n}\n\nexport const scrollQueue = new ScrollQueue()\n", "import { ScrollContext } from './ScrollContext.js'\nimport { scrollQueue } from './ScrollQueue.js'\nimport { findNextScrollableAncestor } from './utils.js'\n\n/**\n *\n * @param {RenderContext} context\n */\nexport const scrollToContext = async context => {\n    const scrollContext = new ScrollContext(context)\n    await scrollContext.init()\n\n    if (!scrollContext.elem) void 0\n    else if (scrollContext.scrollToElem) {\n        scrollQueue.push(scrollContext)\n    } else scrollToTop(scrollContext.elem, await scrollContext.getBoundary())\n}\n\n/**\n *\n * @param {HTMLElement} elem\n * @param {HTMLElement} boundary\n */\nexport const scrollToTop = (elem, boundary) => {\n    let parent = findNextScrollableAncestor(elem, [boundary])\n\n    while (parent) {\n        const oldBehavior = parent.style.scrollBehavior\n\n        // override scroll behavior of the element to make it scroll instantly\n        parent.style.scrollBehavior = 'auto'\n        parent.scrollTo(0, 0)\n        parent.style.scrollBehavior = oldBehavior\n\n        parent = findNextScrollableAncestor(parent, [boundary])\n    }\n}\n", "// todo move attachProps to generic utils\n\n/**\n * Attaches props to a Svelte component\n * @example\n * import MyComponent from './MyComponent.svelte'\n * const MyComponentWithProps = attachProps(MyComponent, {msg: 'hello world'})\n * @template {typeof import('svelte/internal').SvelteComponentDev} C\n * @param {C} Component\n * @param {Object.<string, any>} props\n * @returns {C}\n */\nexport const attachProps = (Component, props, defaults) => {\n    // @ts-ignore\n    return function (options) {\n        options.props = {\n            ...defaults,\n            ...options.props,\n            ...props,\n        }\n        return new Component(options)\n    }\n}\n\n/**\n * @param {RenderContext} context\n */\nexport const getLineage = context => {\n    const contexts = []\n    while (context) {\n        contexts.push(context)\n        context = context.parentContext\n    }\n    return contexts\n}\n", "<script>\n    import { get } from 'svelte/store'\n    import { scrollToContext } from './scroll.js'\n    import { getLineage } from '../../renderer/utils/index.js'\n\n    /** @type {RenderContext} */\n    export let context\n    export let isRoot\n    isRoot\n\n    $: ({ route, router } = context)\n    $: if (route && !route.state.dontScroll) {\n        if (route.hash && route.leaf === context.fragment) {\n            scrollToContext(context)\n        } else if (\n            // The node is the leaf of the active route of the router.\n            (get(router.activeRoute).leaf.node === context.node ||\n                // the node and its ancestors are all active\n                getLineage(context).every(ctx => get(ctx.isActive))) &&\n            // don't scroll if the node context was already active\n            context !== context.parentContext?.lastActiveChildContext\n        )\n            scrollToContext(context)\n    }\n</script>\n\n<slot />\n", "import ScrollDecorator from './ScrollDecorator.svelte'\nimport { scrollQueue } from './ScrollQueue'\n\n/** @returns {RoutifyRuntimePlugin} */\nexport default () => ({\n    onMount: ({ context }) => {\n        context.decorators.push(ScrollDecorator)\n    },\n    afterRouteRendered: () => scrollQueue.processQueue(),\n})\n", "/**\n * @typedef { Object } RouterOptionsNormalizedOverlay\n * @prop { UrlRewrite[] } urlRewrite hook: transforms paths to and from router and browser\n * @prop { RouterInitCallback[] } beforeRouterInit hook: runs before each router initiation\n * @prop { RouterInitCallback[] } afterRouterInit hook: runs after each router initiation\n * @prop { AfterRouteRenderedCallback[] } afterRouteRendered hook: runs after each router initiation\n * @prop { BeforeUrlChangeCallback[] } beforeUrlChange hook: guard that runs before url changes\n * @prop { AfterUrlChangeCallback[] } afterUrlChange hook: runs after url has changed\n * @prop { AfterRouteRenderedCallback[] } afterUrlChange hook: runs after route has been rendered\n * @prop { TransformFragmentsCallback[] } transformFragments hook: transform route fragments after navigation\n * @prop { OnMountRouterCallback[] } onMount hook: runs when router is mounted\n * @prop { OnDestroyRouterCallback[] } onDestroy hook: runs before router is destroyed\n */\n\n/**\n * @typedef { RoutifyRuntimeOptions & RouterOptionsNormalizedOverlay } RouterOptionsNormalized\n */\n\n/**\n * merges options.plugin into options\n * @param {Partial<RoutifyRuntimeOptions>} options\n * @param {Partial<RouterOptionsNormalized>=} config\n */\nexport const normalizeRouterOptions = (options, config) => {\n    config = config || {\n        name: '',\n        beforeRouterInit: [],\n        afterRouterInit: [],\n        urlRewrite: [],\n        beforeUrlChange: [],\n        afterUrlChange: [],\n        afterRouteRendered: [],\n        transformFragments: [],\n        onMount: [],\n        onDestroy: [],\n    }\n\n    // separate plugins and options\n    const { plugins, ...optionsOnly } = options\n\n    /** @type {Partial<RoutifyRuntimeOptions>[]} */\n    const optionsGroups = [...(plugins || []), optionsOnly]\n    optionsGroups.forEach(pluginOptions => {\n        pluginOptions.plugins?.forEach(plugin => normalizeRouterOptions(plugin, config))\n        delete pluginOptions.plugins\n\n        Object.entries(pluginOptions).forEach(([field, value]) => {\n            if (Array.isArray(config[field]))\n                config[field].push(...[value].flat().filter(Boolean))\n            else config[field] = value || config[field]\n        })\n    })\n    return config\n}\n", "/**\n * @typedef { Object } ParentCmpCtx\n * @prop { Route } route\n * @prop { RNodeRuntime } node\n * @prop { Object.<String|Number, String|Number> } localParams\n * @prop { Object.<String|Number, any> } options\n */\n\nimport { derived, get, writable } from 'svelte/store'\nimport { Route } from '../Route/Route.js'\nimport {\n    fromEntries,\n    urlFromAddress,\n    getable,\n    identicalRoutes,\n    getRoutifyFragmentContextMaybe,\n} from '../utils/index.js'\nimport { BaseReflector } from './urlReflectors/ReflectorBase.js'\nimport { appInstance } from '../Global/Global.js'\nimport { RoutifyRuntime } from '../Instance/RoutifyRuntime.js'\nimport { AddressReflector } from './urlReflectors/Address.js'\nimport { InternalReflector } from './urlReflectors/Internal.js'\nimport {\n    createGuardsCollection,\n    createPipelineCollection,\n    createSequenceHooksCollection,\n} from 'hookar'\nimport reset from '../plugins/reset/index.js'\nimport stripTrailingIndex from '../plugins/stripTrailingIndex'\nimport scroller from '../plugins/scroller/plugin.js'\n\nimport { next } from '../../common/utils.js'\nimport { normalizeRouterOptions } from './utils/index.js'\nimport { URIDecodeObject } from '../Route/utils.js'\n\n// todo move stripNullFields and normalizeRouterOptions to utils file.\nconst stripNullFields = obj =>\n    Object.fromEntries(Object.entries(obj).filter(([_, v]) => v != null))\n\nconst defaultPlugins = [reset(), scroller(), stripTrailingIndex()]\n\n/**\n * @implements { Readable<Router> }\n */\nexport class Router {\n    /** @type { RouteStore } */\n    pendingRoute = getable(null)\n    /** @type { RouteStore } */\n    activeRoute = getable(null)\n\n    _urlReflector = null\n\n    /** @type {UrlRewrite[]} */\n    urlRewrites = []\n\n    /** @type { import('hookar').HooksCollection<RouterInitCallback> } */\n    beforeRouterInit = createSequenceHooksCollection()\n    /** @type { import('hookar').HooksCollection<RouterInitCallback> } */\n    afterRouterInit = createSequenceHooksCollection()\n    /** @type { import('hookar').HooksCollection<BeforeUrlChangeCallback> } */\n    beforeUrlChange = createGuardsCollection()\n    /** @type { import('hookar').HooksCollection<AfterUrlChangeCallback> } */\n    afterUrlChange = createSequenceHooksCollection()\n    /** @type { import('hookar').HooksCollection<AfterRouteRenderedCallback> } */\n    afterRouteRendered = createSequenceHooksCollection()\n    /** @type { import('hookar').HooksCollection<TransformFragmentsCallback> } */\n    transformFragments = createPipelineCollection()\n    onMount = createSequenceHooksCollection()\n    /** @type { import('hookar').HooksCollection<OnDestroyRouterCallback> } */\n    onDestroy = createSequenceHooksCollection()\n\n    parentElem = null\n\n    /** @type {QueryHandler} */\n    queryHandler = {\n        parse: (search, route) =>\n            URIDecodeObject(fromEntries(new URLSearchParams(search))),\n        stringify: (params, route) => {\n            const query = new URLSearchParams(params).toString()\n            return query ? `?${query}` : ''\n        },\n    }\n\n    /** @type {ClickHandler} */\n    clickHandler = {}\n\n    url = {\n        internal: () => this.url.getPending() || this.url.getActive(),\n        external: () => this.getExternalUrl(),\n        getActive: () => get(this.activeRoute)?.url,\n        getPending: () => get(this.pendingRoute)?.url,\n        toString: () => this.url.internal(),\n        set: this._setUrl.bind(this),\n        push: (url, state = {}) => this._setUrl(url, 'pushState', false, state),\n        replace: (url, state = {}) => this._setUrl(url, 'replaceState', false, state),\n        pop: (url, state = {}) => this._setUrl(url, 'popState', false, state),\n    }\n\n    /**\n     * function that resolves after the active route has changed\n     * @returns {Promise<Route>} */\n    ready = async () =>\n        (!this.pendingRoute.get() && this.activeRoute.get()) ||\n        next(this.activeRoute, x => !!x)\n\n    /** @type {Route[]} */\n    history = []\n\n    /**\n     * @param {Partial<RoutifyRuntimeOptions>} input\n     */\n    constructor(input) {\n        const matchingRouter = appInstance.routers.find(r => r.name == (input.name || ''))\n        if (matchingRouter) {\n            matchingRouter.init(input)\n            return matchingRouter\n        }\n\n        this.parentCmpCtx = getRoutifyFragmentContextMaybe()\n\n        const { subscribe, set } = writable(this)\n        this.subscribe = subscribe\n        this.triggerStore = () => set(this)\n\n        this.init(input)\n        this.params = derived(this.activeRoute, $activeRoute => $activeRoute.params)\n        // we're using setTimeout to make sure outgoing routers have been destroyed\n        // this also prevents the first router from absorbing the url from the address and\n        // then reflecting only its internal url before other routers have absorbed the url\n        this.afterUrlChange(() => setTimeout(() => this._urlReflector.reflect()))\n        this.activeRoute.get = () => get(this.activeRoute)\n        this.pendingRoute.get = () => get(this.pendingRoute)\n    }\n\n    /**\n     * @param {Partial<RoutifyRuntimeOptions>} input\n     */\n    init(input) {\n        const firstInit = !this.options\n\n        input.plugins = [...defaultPlugins, ...(input.plugins || [])].filter(Boolean)\n\n        // we need to strip undefine / null fields since they would overwrite existing options\n        input = stripNullFields(input)\n        /** @type {Partial<import('./utils').RouterOptionsNormalized>} */\n        this.options = normalizeRouterOptions({ ...this.options, ...input })\n\n        let {\n            instance,\n            rootNode,\n            name,\n            routes,\n            urlRewrite,\n            urlReflector,\n            url,\n            passthrough,\n            beforeUrlChange,\n            afterUrlChange,\n            afterRouteRendered,\n            transformFragments,\n            onMount,\n            onDestroy,\n            beforeRouterInit,\n            afterRouterInit,\n            queryHandler,\n            clickHandler,\n        } = this.options\n\n        if (queryHandler) this.queryHandler = queryHandler\n        if (clickHandler) this.clickHandler = clickHandler\n\n        beforeUrlChange.forEach(this.beforeUrlChange)\n        transformFragments.forEach(this.transformFragments)\n        afterUrlChange.forEach(this.afterUrlChange)\n        afterRouteRendered.forEach(this.afterRouteRendered)\n        onMount.forEach(this.onMount)\n        onDestroy.forEach(this.onDestroy)\n        beforeRouterInit.forEach(this.beforeRouterInit)\n        afterRouterInit.forEach(this.afterRouterInit)\n\n        this.beforeRouterInit.run({ router: this, firstInit })\n\n        /** @type {RoutifyRuntime} */\n        this.instance =\n            instance ||\n            this.instance ||\n            this.parentCmpCtx?.route?.router?.instance ||\n            appInstance.instances[0] ||\n            new RoutifyRuntime({})\n\n        this.name = name ?? this.name\n\n        this.urlRewrites = urlRewrite ?? this.urlRewrites\n\n        // ROUTIFY-DEV-ONLY-START\n        this.log =\n            this.log || this.instance.log.createChild(this.name || '[unnamed instance]')\n        // ROUTIFY-DEV-ONLY-END\n\n        // TODO not used. Deprecate?\n        if (passthrough && !(passthrough instanceof Router))\n            passthrough = this.parentCmpCtx?.route.router || passthrough\n\n        this.passthrough = passthrough || this.passthrough\n\n        // remove from old instance, in case the instance changed\n        appInstance.instances.forEach(inst => {\n            const index = inst.routers.indexOf(this)\n            if (index !== -1) inst.routers.splice(index, 1)\n        })\n        // add to current instance\n        this.instance.routers.push(this)\n\n        if (routes && !this.rootNode) this.importRoutes(routes)\n\n        /** @type {RNodeRuntime} */\n        this.rootNode =\n            rootNode ?? this.rootNode ?? this.instance.rootNodes[this.name || 'default']\n\n        this.log.debug('initiated router') // ROUTIFY-DEV-ONLY\n\n        if (this.url.getActive()) {\n            this.log.debug('router was created with activeUrl') // ROUTIFY-DEV-ONLY\n            this._setUrl(this.url.getActive(), 'pushState', true)\n        }\n\n        const shouldInstallUrlReflector =\n            !this.urlReflector ||\n            (urlReflector && !(this.urlReflector instanceof urlReflector))\n\n        if (shouldInstallUrlReflector) {\n            urlReflector =\n                urlReflector ||\n                (typeof window != 'undefined' ? AddressReflector : InternalReflector)\n            this.setUrlReflector(urlReflector)\n        }\n\n        if (url) this.url.replace(url)\n        this.triggerStore()\n        this.afterRouterInit.run({ router: this, firstInit })\n    }\n\n    /** @param {HTMLElement} elem */\n    setParentElem = elem => {\n        this.parentElem = elem\n    }\n\n    importRoutes(routes) {\n        this.rootNode = this.instance.createNode().importTree(routes)\n        this.instance.rootNodes[routes.rootName || 'unnamed'] = this.rootNode\n    }\n\n    /**\n     * converts a URL or Routify's internal URL to an external URL (for the browser)\n     * @param {string=} url\n     * @returns\n     */\n    getExternalUrl = url => {\n        const route = get(this.pendingRoute) || get(this.activeRoute)\n        url = url || route.url\n\n        const result = this.urlRewrites.reduce(\n            (_url, rewrite) => rewrite.toExternal(_url, { router: this }),\n            url,\n        )\n        return result.replace(/\\/index$/, '') // strip trailing index\n    }\n\n    /**\n     * converts an external URL (from the browser) to an internal URL\n     * @param {string} url\n     * @returns\n     */\n    getInternalUrl = url =>\n        this.urlRewrites.reduce(\n            (_url, rewrite) => rewrite.toInternal(_url, { router: this }),\n            url,\n        )\n\n    /**\n     *\n     * @param {string} url\n     * @param {UrlState} mode pushState, replaceState or popState\n     * @param {boolean} [isInternal=false] if the URL is already internal, skip rewrite.toInternal\n     * @param {Object=} state a state to attach to the route\n     * @returns {Promise<true|false>}\n     */\n    async _setUrl(url, mode, isInternal, state = {}) {\n        if (!isInternal) url = this.getInternalUrl(url)\n\n        // todo move to Route.js\n        url = url || '/'\n        url = url.replace(/(.+)\\/+([#?]|$)/, '$1$2') // strip trailing slashes\n\n        // ROUTIFY-DEV-ONLY-START\n        this.log.debug('set url', {\n            url,\n            mode,\n            prev: this.url.internal(),\n            browserOld: globalThis.document && urlFromAddress(),\n            state,\n        })\n        // ROUTIFY-DEV-ONLY-END\n\n        const currentRoute = this.pendingRoute.get() || this.activeRoute.get()\n\n        if (!this.rootNode && this.instance.global.routeMaps[this.name])\n            this.importRoutes(await this.instance.global.routeMaps[this.name]())\n\n        const route = new Route(this, url, mode, state)\n\n        const loadRoutePromise = route.loadRoute()\n        if (state.prefetch) return\n\n        if (identicalRoutes(currentRoute, route)) {\n            this.log.debug('current route is identical - skip', currentRoute, route) // ROUTIFY-DEV-ONLY\n            return false\n        } else {\n            route.log.debug('set pending route', route) // ROUTIFY-DEV-ONLY\n\n            this.pendingRoute.set(route)\n            const didLoadRoute = await loadRoutePromise\n            // pending route could have changed while awaiting route.loadRoute() above\n            if (this.pendingRoute.get() === route) this.pendingRoute.set(null)\n\n            if (didLoadRoute) this.setActiveRoute(route)\n\n            // TODO Wait a tick for component rendering. There's probably be a better way to handle this.\n            await new Promise(resolve => setTimeout(resolve))\n\n            return true\n        }\n    }\n\n    setActiveRoute(route) {\n        // the route made it through all pretasks, lets set it to active\n        this.log.debug('set active route', this) // ROUTIFY-DEV-ONLY\n\n        const $activeRoute = this.activeRoute.get()\n        if ($activeRoute) this.history.push($activeRoute)\n\n        this.activeRoute.set(route)\n\n        this.afterUrlChange.run({\n            route: route,\n            history: [...this.history].reverse(),\n        })\n\n        Promise.all(\n            route.fragments.map(fragment =>\n                fragment.renderContext.then(rc => rc.mounted),\n            ),\n        ).then(() => this.afterRouteRendered.run({ route }))\n\n        this.log.debug('unset pending route', this) // ROUTIFY-DEV-ONLY\n    }\n\n    destroy() {\n        this.log.debug(`destroying router`) // ROUTIFY-DEV-ONLY\n        this.instance.routers = this.instance.routers.filter(router => router !== this)\n        this.onDestroy.run({ router: this })\n    }\n\n    /** @type {BaseReflector} */\n    get urlReflector() {\n        return this._urlReflector\n    }\n\n    /** @param {typeof BaseReflector} UrlReflector */\n    setUrlReflector(UrlReflector) {\n        this._urlReflector?.uninstall()\n        this._urlReflector = new UrlReflector(this)\n        this._urlReflector.install()\n        this.triggerStore()\n    }\n}\n\n/**\n * Creates a new router\n * @param  {Partial<RoutifyRuntimeOptions>} options\n */\nexport const createRouter = options => new Router(options)\n", "<!-- Looping decorator wrapper. The Parent prop returns a new decorator wrapper with the next decorator -->\n<script>\n    import { onDestroy } from 'svelte'\n\n    export let decorators = null\n    export let isRoot = true\n    export let context\n    decorators = decorators || context.decorators\n    let [decorator, ...restOfDecorators] = [...decorators]\n    while (decorator && !decorator?.shouldRender({ context, isRoot, decorators }))\n        [decorator, ...restOfDecorators] = [...restOfDecorators]\n\n    // we only want to trigger onDestroy from the first decorator wrapper\n    if (isRoot) onDestroy(() => context.onDestroy.run())\n</script>\n\n{#if decorator}\n    <svelte:component this={decorator.component} {context} {isRoot}>\n        <svelte:self decorators={restOfDecorators} {context} isRoot={false}>\n            <slot />\n        </svelte:self>\n    </svelte:component>\n{:else}\n    <slot />\n{/if}\n", "<script>\n    export let context = null\n    export let Parent = null\n    context // need this to avoid warnings\n    Parent // need this to avoid warnings\n</script>\n\n<slot />\n", "<script>\n    import { onMount as _onMount } from 'svelte'\n\n    /** @type {import('./AnchorDecorator').Location}*/\n    export let location\n\n    /** @type {(parent: Node, anchor?: Node)=>any} */\n    export let onMount = x => x\n\n    /** @type {HTMLElement} */\n    let elem\n\n    let mounted = false\n\n    /** @param {HTMLElement} elem */\n    const nextValidSibling = elem => {\n        const next = /** @type {HTMLElement}*/ (elem.nextElementSibling)\n        if ('routifyAnchorBackstop' in next.dataset) {\n            console.warn('found no children in', elem.parentElement)\n            throw new Error(\n                'AnchorLocation is set to firstChild, but no children were found',\n            )\n        }\n        return next && 'routifyAnchorLocator' in next.dataset\n            ? nextValidSibling(next)\n            : next\n    }\n\n    _onMount(async () => {\n        if (mounted) return\n        if (location === 'wrapper') onMount(elem)\n        else if (location === 'parent') onMount(elem.parentElement)\n        else if (location === 'header') onMount(elem.parentElement, elem)\n        else if (location === 'firstChild') {\n            const nextSib = nextValidSibling(elem)\n            onMount(elem.parentElement, nextSib)\n        } else throw new Error(`Incorrect location provided. Got ${location}`)\n        mounted = true // only works if firstchild is synchronous\n    })\n</script>\n\n{#if location === 'wrapper'}\n    <div data-routify-anchor-parent bind:this={elem} {...$$restProps}>\n        <slot />\n    </div>\n{:else if location === 'header'}\n    <div data-routify-anchor-header bind:this={elem} {...$$restProps} />\n    <slot />\n{:else}\n    {#if !mounted}\n        <div\n            data-routify-anchor-locator\n            class=\"anchor\"\n            bind:this={elem}\n            {...$$restProps} />\n    {/if}\n    <slot />\n\n    {#if !mounted} <div class=\"anchor-backstop\" data-routify-anchor-backstop /> {/if}\n{/if}\n", "<script>\n    import Compose from './ComposeFragments.svelte'\n    import DecoratorWrapper from './DecoratorWrapper.svelte'\n    import Noop from '../decorators/Noop.svelte'\n    import AnchorDecorator from '../decorators/AnchorDecorator.svelte'\n    import { isAnonFn, setRoutifyFragmentContext, waitFor } from '../utils/index.js'\n    /** @type {RenderContext} */\n    export let context\n    const { isVisible, childFragments } = context // grab the stores\n    let NodeComponent = context.node.module?.default || context.node.asyncModule || Noop\n    setRoutifyFragmentContext(context)\n    /** @param {HTMLElement} elem */\n    const updateRenderContext = (elem, newMeta) => {\n        if (elem)\n            elem['__routify_meta'] = {\n                ...(elem && elem['__routify_meta']),\n                renderContext: { ...elem['__routify_meta']?.renderContext, ...newMeta },\n            }\n        return elem\n    }\n\n    /**\n     * @param {HTMLElement} parent\n     * @param {HTMLElement} anchor\n     */\n    const initialize = async (parent, anchor) => {\n        // wait for parent to be ready, otherwise context.elm won't be set in the correct order\n        context.parentContext && (await waitFor(context.parentContext.elem, Boolean))\n        context.elem.set({ anchor, parent })\n        // TODO parent context should be parent context, not context. But we also need a parent of context if we're using a wrapper.\n        parent = updateRenderContext(parent, { parent: context })\n        if (anchor) anchor = updateRenderContext(anchor, { anchor: context })\n    }\n\n    const childMounted = () => {\n        context.mounted.resolve(context)\n        context.router.log.verbose('render', context.node.path, context) // ROUTIFY-DEV-ONLY\n    }\n\n    $: hasInlineChildren = context.node.navigableChildren.some(child => child.meta.inline)\n\n    $: if (isAnonFn(NodeComponent) && $isVisible)\n        context.node.loadModule().then(r => (NodeComponent = r.default))\n\n    $: ({ params, load } = context.fragment)\n\n    $: compProps = { ...params, ...load?.props, ...context.props }\n</script>\n\n{#if $isVisible && !isAnonFn(NodeComponent)}\n    <!-- todo IMPORTANT display: contents in style will set boundingClient().top to 0 for all elements -->\n    <!-- DECORATOR COMPONENT\n        we don't need to pass props as we provided them with \"attachProps\" in Component.svelte -->\n    <DecoratorWrapper {context}>\n        <AnchorDecorator location={context.anchorLocation} onMount={initialize}>\n            <!-- PAGE COMPONENT -->\n            <svelte:component\n                this={NodeComponent}\n                {...compProps}\n                {...context.props}\n                {context}\n                let:props\n                let:inline\n                let:multi\n                let:decorator\n                let:anchor\n                let:options\n                let:scrollBoundary\n                >{#if $childFragments.length || ((hasInlineChildren || inline || multi) && !(inline || multi)?.single)}\n                    <!-- CHILD PAGES -->\n                    <Compose\n                        options={{\n                            inline: inline || multi,\n                            decorator,\n                            props,\n                            options,\n                            scrollBoundary,\n                            anchor: anchor || context.anchorLocation,\n                        }}\n                        {context} />\n                {/if}</svelte:component>\n            <div use:childMounted />\n        </AnchorDecorator>\n    </DecoratorWrapper>\n{/if}\n\n<!-- TODO if decorator is inside anchor, scrollIntoView doesn't work -->\n<!-- TODO if anchor is inside decorator, scrollToTop doesn't work -->\n<!-- TODO this is a matter of parent anchor vs firstChildAnchor. firstChild wants a nested decoratorWrapper to latch onto. `parent` wants a parentDecorator. -->\n", "/**\n * normalize inline object. If no pages are specified, use siblings of the refNode\n * @param {InlineInput|null} inlineInput\n * @returns {Partial<Inline>}\n */\nexport const coerceInlineInputToObject = inlineInput => {\n    if (typeof inlineInput === 'undefined') return {}\n\n    return {\n        // if inline is true, callback will return true\n        isInline: () => !!inlineInput,\n\n        // @ts-ignore\n        ...inlineInput,\n    }\n}\n\n/**\n *\n * @param {Partial<Inline>} inlineInput\n * @returns {Inline}\n */\nexport const normalizeInline = inlineInput => ({\n    isInline: () => false,\n\n    scrollIntoView: elem =>\n        elem.scrollIntoViewIfNeeded\n            ? elem.scrollIntoViewIfNeeded()\n            : elem.scrollIntoView(),\n    context: 'browser',\n    params: {},\n    ...inlineInput,\n\n    // If a function is passed, it will be used as the callback.\n    // If undefined, the callback will return true if it's the last element in the array.\n    // Otherwise, it will return true if inline is true.\n    shouldScroll:\n        typeof inlineInput.shouldScroll === 'function'\n            ? inlineInput.shouldScroll\n            : typeof inlineInput.shouldScroll === 'undefined'\n            ? (ctx, index, arr, defaultCallback) => defaultCallback(ctx, index, arr)\n            : () => !!inlineInput.shouldScroll,\n})\n", "const decoratorDefaults = { recursive: true, shouldRender: () => true }\n\n/**\n * @param {DecoratorInput} decorator\n * @returns {Decorator}\n */\nexport const normalizeDecorator = decorator => {\n    if ('component' in decorator) return { ...decoratorDefaults, ...decorator }\n    else return { ...decoratorDefaults, component: decorator }\n}\n\nexport * from './normalizeInline.js'\n", "import { createSequenceHooksCollection } from 'hookar'\nimport { get, writable } from 'svelte/store'\nimport { createDeferredPromise } from '../utils'\nimport { coerceInlineInputToObject, normalizeInline } from './utils/normalizeInline'\nimport { RouteFragment } from '../Route/RouteFragment'\nimport { defaultscrollBoundary, fetchIndexNode, nodeIsIndexed } from './composeFragments'\nimport { jsonClone, lazySet } from '../../common/utils'\n\n/**\n * @param {RNodeRuntime} node\n * @param {Object.<string, string[]>} pool\n */\nconst shiftParams = (node, pool) => {\n    const params = {}\n    node.paramKeys.forEach(key => {\n        // If the pool has a value for this parameter, use the value\n        // and remove it from the pool.\n        if (pool && key in pool) {\n            params[key] = pool[key].shift()\n        }\n    })\n    return params\n}\n\nexport class RouterContext {\n    /** @type {import('svelte/store').Writable<RenderContext[]>} */\n    childContexts = writable([])\n\n    /** @type {import('svelte/store').Writable<RouteFragment[]>} */\n    childFragments = writable([])\n\n    /** @type {import('svelte/store').Writable<RenderContext>} */\n    activeChildContext = writable(null)\n\n    /** @type {RenderContext} */\n    lastActiveChildContext = null\n\n    /** @type {Decorator[]} */\n    decorators = []\n\n    /** @param {{router: Router}} params */\n    constructor({ router }) {\n        this.router = router\n        this.route = router.activeRoute.get()\n    }\n\n    /**\n     * @param {Partial<{inline: InlineInput, decorator:DecoratorInput, props, options, anchor: AnchorLocation, scrollBoundary: scrollBoundary}>} options\n     *\n     * */\n    buildChildContexts(options, newDecorators) {\n        const { childFragments } = this\n        const {\n            inline: rawInlineInputFromSlot,\n            decorator,\n            props,\n            anchor: anchorLocation,\n            options: contextOptions,\n            scrollBoundary = defaultscrollBoundary,\n        } = options\n\n        const refNode = get(childFragments)[0]?.node\n\n        const node = this?.['node'] || refNode.parent\n\n        const matches = node\n            ? node.children.filter(\n                  _node => _node === refNode || node.navigableChildren.includes(_node),\n              )\n            : [refNode]\n\n        /** @type {RNodeRuntime[]} */\n        const children = matches.length ? matches : refNode ? [refNode] : []\n\n        const paramsPool = jsonClone(rawInlineInputFromSlot?.['params'] || {})\n\n        // add a child for each value in the params pool\n        // each child corresponds to the respective key key\n        Object.entries(paramsPool).forEach(([key, values]) => {\n            const sourceIndex = children.findIndex(node => node.paramKeys.includes(key))\n            const newChildNodes = new Array(values.length - 1).fill(children[sourceIndex])\n            // insert the new children after the source\n            children.splice(sourceIndex + 1, 0, ...newChildNodes)\n        })\n\n        const childContexts = children.map(\n            node =>\n                new RenderContext({\n                    node,\n                    paramsPool,\n                    rawInlineInputFromSlot,\n                    parentContext: this,\n                    newDecorators,\n                    contextOptions,\n                    scrollBoundary,\n                    anchorLocation,\n                    props,\n                }),\n        )\n        this.childContexts.set(childContexts)\n    }\n\n    updateChildren() {\n        const activeChildContext = get(this.activeChildContext)\n        get(this.childContexts).forEach(context => context.update(activeChildContext))\n    }\n}\n\nexport class RenderContext extends RouterContext {\n    anchorLocation = 'parent'\n\n    /** @type {RNodeRuntime} */\n    node\n\n    isActive = writable(false)\n    isVisible = writable(false)\n    wasVisible = false\n    isInline = false\n\n    /** @type {Inline} */\n    inline\n\n    /** @type {import('svelte/store').Writable<{ parent: HTMLElement, anchor: HTMLElement }>} */\n    elem = writable(null)\n\n    /** @type {Route} */\n    route\n\n    /** @type {import('svelte/store').Writable<RenderContext[]>} */\n    childContexts = writable([])\n\n    onDestroy = createSequenceHooksCollection()\n\n    mounted = createDeferredPromise()\n\n    /** @type {RouterContext} */\n    routerContext\n\n    /**\n     *\n     * @param {{\n     *   node: RNodeRuntime\n     *   paramsPool: Object.<string, string[]>\n     *   rawInlineInputFromSlot: InlineInput\n     *   parentContext: RenderContext | RouterContext\n     *   newDecorators: Decorator[]\n     *   contextOptions: RenderContextOptions\n     *   scrollBoundary: scrollBoundary\n     *   anchorLocation: AnchorLocation\n     *   router?: Router\n     *   props: Object\n     * }} param0\n     */\n    constructor({\n        node,\n        paramsPool,\n        rawInlineInputFromSlot,\n        parentContext,\n        newDecorators,\n        contextOptions,\n        scrollBoundary,\n        anchorLocation,\n        router,\n        props,\n    }) {\n        super({ router: router || parentContext.router })\n        this.anchorLocation = anchorLocation || 'parent'\n\n        this.node = node\n        this.props = props\n        if (!node) console.trace('node')\n        const params = shiftParams(node, paramsPool)\n        this.fragment = new RouteFragment(null, node, null, params)\n        // if this is a module and it has an index, add it to the child fragments\n        this.childFragments = writable(\n            fetchIndexNode(node) ? [new RouteFragment(null, fetchIndexNode(node))] : [],\n        )\n        this.params = writable({})\n\n        this.inline = normalizeInline({\n            ...coerceInlineInputToObject(rawInlineInputFromSlot),\n            ...coerceInlineInputToObject(node.meta.inline),\n        })\n\n        // parentContext is an instance of RenderContext\n        // if it's not, it's an instance of RouterContext\n        if (parentContext instanceof RenderContext) {\n            this.routerContext = parentContext.routerContext\n            this.parentContext = parentContext\n        } else this.routerContext = parentContext\n\n        this.decorators = newDecorators\n        this.options = contextOptions || {}\n        this.scrollBoundary = scrollBoundary\n    }\n\n    get parentOrRouterContext() {\n        return this.parentContext || this.routerContext\n    }\n\n    get ancestors() {\n        const ancestors = []\n        let context = this.parentContext\n        while (context) {\n            ancestors.push(context)\n            context = context.parentContext\n        }\n        return ancestors\n    }\n\n    setToActive() {\n        const parentContext = this.parentOrRouterContext\n        const [fragment, ...fragments] = get(parentContext.childFragments)\n        this.fragment = fragment\n        this.childFragments.set(fragments)\n        // this is where the route is inherited from the parent context\n        // before this point, the route is null\n        this.route = parentContext.route\n        fragment.renderContext.resolve(this)\n        parentContext.lastActiveChildContext = get(parentContext.activeChildContext)\n\n        parentContext.activeChildContext.set(this)\n\n        this.isInline = this.inline.isInline(this.node, this)\n    }\n\n    update(activeSiblingContext) {\n        this.router.log.verbose('updating renderContext', this.node.name) // ROUTIFY-DEV-ONLY\n        const environment = typeof window !== 'undefined' ? 'browser' : 'ssr'\n\n        this.isInline = this.inline.isInline(this.node, activeSiblingContext)\n        const activeContextIsStandalone =\n            activeSiblingContext && !activeSiblingContext.isInline\n\n        const envIsOkay = ['always', environment].includes(this.inline.context)\n        const isIncluded = this.isInline && !activeContextIsStandalone && envIsOkay\n        const isDefault = !activeSiblingContext && this.node.name === 'index'\n        this.wasVisible = get(this.isVisible)\n        lazySet(\n            this.isActive,\n            this === activeSiblingContext ||\n                (!activeSiblingContext && this.node.meta.isDefault),\n        )\n        lazySet(this.isVisible, get(this.isActive) || isIncluded || isDefault)\n        // if it's not visible, the element doesn't exist anymore\n        if (!get(this.isVisible)) this.elem.set(null)\n        // TODO might need this:\n        // if (!get(context.isVisible)) context.scrollBoundary.set(null)\n        this.updateParams()\n    }\n\n    /** updates params with accumulated values, starting from the root context */\n    updateParams() {\n        /** @type {RenderContext} */\n        let context = this\n        const contexts = []\n        while (context) {\n            contexts.push(context)\n            context = context.parentContext\n        }\n        contexts.reverse()\n        this.params.set(\n            Object.assign({}, ...contexts.map(context => context.fragment.params)),\n        )\n    }\n}\n", "import { get } from 'svelte/store'\nimport { RouteFragment } from '../Route/RouteFragment'\nimport { RenderContext } from './RenderContext'\n\n/**\n * check if fragments have the same node and all a params are in b.\n * @param {RouteFragment} f fragment\n * @returns {(c: RenderContext) => boolean}\n */\nexport const contextHasMatchingFragmentAndParams = f => c =>\n    f.node === c.node &&\n    Object.entries(f.params).every(([key, value]) => c.fragment.params[key] === value)\n\n/**\n * same as node.pagesWithIndex, except includes dynamic pages\n * @param {RNodeRuntime} node\n */\nexport const nodeIsIndexed = node =>\n    !node.meta.fallback && !node.name.startsWith('_') && node.meta?.order !== false\n\n/** @param {RNodeRuntime} node*/\nexport const fetchIndexNode = node =>\n    node.navigableChildren.find(node => node.name === 'index')\n\n/**\n * @param {RNodeRuntime} node\n */\nconst findDecorator = node => node?.children.find(node => node.name === '_decorator')\n\n// TODO addFolderDecorator should always be synchronous\n/**\n *\n * @param {Decorator[]} decorators\n * @param {RenderContext} context\n * @returns {void | Promise<void>}\n */\nexport const addFolderDecorator = (decorators, context) => {\n    const folderDecorator = findDecorator(context.node)\n\n    if (!folderDecorator) return\n\n    if (!folderDecorator.module)\n        return folderDecorator.loadModule().then(() => {\n            console.warn(`Dynamic import of \"${folderDecorator.id}\" may cause issues.`)\n            addFolderDecorator(decorators, context)\n        })\n\n    const options = folderDecorator.module['decorator'] || {}\n\n    decorators.push({\n        component: folderDecorator.module['default'],\n        recursive: options.recursive ?? folderDecorator.meta.recursive ?? true,\n        shouldRender: options.shouldRender ?? (() => true),\n    })\n}\n\nexport function findNearestInlineContext(context) {\n    return context\n        ? context.isInline\n            ? context\n            : findNearestInlineContext(context.parentContext)\n        : null\n}\n\nexport const defaultscrollBoundary = ownContext =>\n    !ownContext.isInline && get(findNearestInlineContext(ownContext)?.elem)?.parent\n\n/**\n * @param {RenderContext[]} childContexts\n * @param {RouteFragment} fragment\n * @returns {RenderContext}\n */\nexport const findActiveChildContext = (childContexts, fragment) =>\n    childContexts.find(contextHasMatchingFragmentAndParams(fragment)) ||\n    childContexts.find(s => s.node === fragment?.node)\n", "<script>\n    import { get } from 'svelte/store'\n    import { pushToOrReplace } from '../utils/index.js'\n    import RenderFragment from './RenderFragment.svelte'\n    import { normalizeDecorator } from './utils/normalizeDecorator.js'\n    import { handleRebuildError } from '../utils/messages.js'\n    import { addFolderDecorator, findActiveChildContext } from './composeFragments.js'\n\n    /** @type {RenderContext}*/\n    export let context\n\n    /** @type {RenderContextOptions} */\n    export let options\n\n    const { childFragments } = context\n    const { decorator } = options\n\n    const recursiveDecorators = context.decorators.filter(deco => deco.recursive)\n    const newDecorators = pushToOrReplace(recursiveDecorators, decorator)\n        .filter(Boolean)\n        .map(normalizeDecorator)\n\n    // addFolderDecorator returns void if decorator is sync, otherwise it returns a promise\n    let decoratorReady = !addFolderDecorator(newDecorators, context)?.['then'](\n        () => (decoratorReady = true),\n    )\n\n    context.buildChildContexts(options, newDecorators)\n\n    const { childContexts } = context\n\n    const _handleChildren = childFragments => {\n        context.router.log.verbose('handle children', childFragments) // ROUTIFY-DEV-ONLY\n        const setInactive = cf => cf.renderContext.then(rc => rc.isActive.set(false))\n\n        if (childFragments.length && context.route) setActiveChildContext(context)\n        // if we're traversing down the tree, we need to set all old child fragments to inactive\n        else childFragments.forEach(setInactive)\n\n        context.updateChildren()\n    }\n    const setActiveChildContext = (context, rebuild) => {\n        const [fragment, ...childFragments] = get(context.childFragments)\n        const childContexts = get(context.childContexts)\n\n        const toBeActiveChildContext = findActiveChildContext(childContexts, fragment)\n\n        if (!toBeActiveChildContext) {\n            if (rebuild) handleRebuildError(context, childContexts)\n\n            // if we're rendering a node that didn't exist at this level before, we need to rebuild the child contexts\n            // this happens when navigating in or out of a reset module\n\n            context.buildChildContexts(options, newDecorators)\n\n            return setActiveChildContext(context, true)\n        }\n\n        toBeActiveChildContext.setToActive()\n\n        context.childContexts.set(childContexts)\n    }\n\n    $: _handleChildren($childFragments)\n</script>\n\n{#if decoratorReady}\n    {#each $childContexts as context (context)}\n        <RenderFragment {context} />\n    {/each}\n{/if}\n", "<script>\n    import { Router } from './Router.js'\n    import { onDestroy as _onDestroy } from 'svelte'\n    import {\n        getUrlFromEvent,\n        resolveIfAnonFn,\n        shouldIgnoreClick,\n    } from '../utils/index.js'\n    import Component from '../renderer/ComposeFragments.svelte'\n    import { get } from 'svelte/store'\n    import AnchorDecorator from '../decorators/AnchorDecorator.svelte'\n    import { normalizeDecorator } from '../renderer/utils/normalizeDecorator.js'\n    import { RouterContext } from '../renderer/RenderContext.js'\n\n    /** @type {Router} */\n    export let router = null\n    export let routes = null\n    export let decorator = null\n\n    /** @type {RoutifyRuntimeOptions['urlReflector']} */\n    export let urlReflector = null\n    /** @type {RoutifyRuntimeOptions['instance']} */\n    export let instance = null\n    /** @type {RoutifyRuntimeOptions['urlRewrite']} */\n    export let urlRewrite = null\n    /** @type {RoutifyRuntimeOptions['url']} */\n    export let url = null\n    /** @type {RoutifyRuntimeOptions['name']} */\n    export let name = null\n    /** @type {RoutifyRuntimeOptions['rootNode']} */\n    export let rootNode = null\n    /** @type {RoutifyRuntimeOptions['passthrough']} */\n    export let passthrough = null\n    /** @type {RoutifyRuntimeOptions['beforeRouterInit']} */\n    export let beforeRouterInit = null\n    /** @type {RoutifyRuntimeOptions['afterRouterInit']} */\n    export let afterRouterInit = null\n    /** @type {RoutifyRuntimeOptions['beforeUrlChange']} */\n    export let beforeUrlChange = null\n    /** @type {RoutifyRuntimeOptions['afterUrlChange']} */\n    export let afterUrlChange = null\n    /** @type {RoutifyRuntimeOptions['transformFragments']} */\n    export let transformFragments = null\n    /** @type {RoutifyRuntimeOptions['onDestroy']} */\n    export let onDestroy = null\n    /** @type {RoutifyRuntimeOptions['plugins']} */\n    export let plugins = null\n    /** @type {RoutifyRuntimeOptions['queryHandler']} */\n    export let queryHandler = null\n    /** @type {import('../decorators/AnchorDecorator').Location}*/\n    export let anchor = 'wrapper'\n    /** @type {ClickHandler}*/\n    export let clickHandler = {}\n\n    /** @type {RoutifyRuntimeOptions}*/\n    const options = {\n        instance,\n        rootNode,\n        name,\n        routes,\n        urlRewrite,\n        urlReflector,\n        passthrough,\n        beforeRouterInit,\n        afterRouterInit,\n        beforeUrlChange,\n        afterUrlChange,\n        transformFragments,\n        onDestroy,\n        plugins,\n        queryHandler,\n        clickHandler,\n    }\n\n    router = router || new Router(options)\n    const context = new RouterContext({ router })\n\n    router.onMount.run({ context, router })\n    context.decorators = context.decorators.map(normalizeDecorator)\n\n    $: if (url && url !== router.url.internal()) router.url.replace(url)\n    $: activeRoute = router.activeRoute\n    $: context.childFragments.set($activeRoute?.fragments || [])\n    $: context.route = $activeRoute\n\n    $: router.log.debug('before render', get(context.childFragments)) // ROUTIFY-DEV-ONLY\n\n    /** @param {HTMLElement} elem */\n    const initialize = elem => {\n        elem = anchor === 'parent' || anchor === 'wrapper' ? elem : elem.parentElement\n        router.setParentElem(elem)\n\n        // todo check that a router hasn't already been added to this element\n        elem['__routify_meta'] = { ...elem['__routify_meta'], router: router }\n\n        let clickScopeElem = resolveIfAnonFn(router.clickHandler?.elem || elem, [elem])\n\n        // passthrough should be handled by clickHandler.callback instead?\n        if (!router.passthrough) {\n            clickScopeElem.addEventListener('click', handleClick)\n            clickScopeElem.addEventListener('keydown', handleClick)\n            clickScopeElem.addEventListener('mouseover', handleHover)\n        }\n    }\n\n    const handleHover = event => {\n        let { url, state } = getUrlFromEvent(event)\n        const urlOrFalse = router.clickHandler.callback?.(event, url) ?? url\n\n        const shouldPrefetch =\n            typeof urlOrFalse === 'string' &&\n            event.target.closest('[data-routify-prefetch-data]')?.dataset\n                .routifyPrefetchData === 'hover'\n\n        if (shouldPrefetch) router.url.push(urlOrFalse, { prefetch: true, ...state })\n    }\n\n    const handleClick = event => {\n        if (shouldIgnoreClick(event)) return\n\n        const { url: eventUrl, state } = getUrlFromEvent(event)\n\n        const url = router.clickHandler.callback?.(event, eventUrl) ?? eventUrl\n\n        if (typeof url === 'string') router.url.push(url, state)\n    }\n\n    if (typeof window !== 'undefined') _onDestroy(() => router.destroy())\n</script>\n\n<AnchorDecorator onMount={initialize} style=\"display: contents\" location={anchor}>\n    {#if $activeRoute}\n        <Component {context} options={{ decorator }} />\n    {/if}\n</AnchorDecorator>\n", "import { BaseReflector } from './ReflectorBase.js'\n\nexport class LocalStorageReflector extends BaseReflector {\n    /** @param {Router} router */\n    constructor(router) {\n        super(router)\n        this.storageName = `__routify-router-${this.router.name}`\n    }\n    reflect() {\n        window.localStorage.setItem(this.storageName, this.router.url.internal())\n    }\n    install() {\n        const url = window.localStorage.getItem(this.storageName)\n        this.router.url.replace(url || '/')\n    }\n}\n", "// wrap console.warn without losing line numbers and preserve 12 lines of stack\nexport const killWarnings = () => {\n    var originalWarn = console.warn\n\n    console.warn = function () {\n        // Convert arguments object to array\n        var args = Array.prototype.slice.call(arguments)\n\n        // If message contains the word \"context\", then just return\n        if (args[0].match(/<.+> was created with unknown prop 'context'/)) return\n        if (args[0].match(/<.+> was created with unknown prop 'isRoot'/)) return\n        if (args[0].match(/<.+> received an unexpected slot \"default\"\\./)) return\n\n        // Create a stack trace\n        var stackTrace = new Error().stack\n\n        // Check the third line of the stack trace for the call site\n        // (first line is \"Error\", second line is this function, third line is caller)\n        var callSite = stackTrace.split('\\n')[2]\n\n        if (callSite) {\n            args.push(callSite.trim())\n        }\n\n        originalWarn.apply(console, args)\n    }\n}\n", "/**\n * like assign, but without overwrite. First prop wins.\n * @param {object} target\n * @param  {...any} sources\n */\nconst gentleAssign = (target, ...sources) => {\n    sources.forEach(source =>\n        Object.keys(source).forEach(key => (target[key] = target[key] ?? source[key])),\n    )\n    return target\n}\n\n/**\n * deep assign node trees, will only overwrite undefined values\n * also merges meta\n * @param {RNodeRuntime} target eg. de\n * @param {...RNodeRuntime} sources eg. en\n * @returns {RNodeRuntime}\n */\nexport const assignNode = (target, ...sources) => {\n    // assign nodes\n    gentleAssign(target, ...sources)\n\n    // assign meta\n    gentleAssign(target.meta, ...sources.map(s => s.meta))\n\n    sources.forEach(source => {\n        source.children.forEach(sNode => {\n            let tNode = target.children.find(tNode => tNode.name === sNode.name)\n            if (!tNode) tNode = target.createChild(null, null)\n            assignNode(tNode, sNode)\n        })\n    })\n    return target\n}\n\n/**\n *\n * @param {RNodeRuntime} node\n * @param {function(RNodeRuntime['parent']):any} callback\n * @returns {RNodeRuntime['parent']|undefined}\n */\nexport const findNearestParent = (node, callback) => {\n    let parent = /** @type {RNodeRuntime} */ node.parent\n    while (parent) {\n        if (callback(parent)) return parent\n        parent = parent.parent\n    }\n}\n\n/**\n * gets the ancestry distance between two nodes. Eg.:\n * the distance between the nodes /foo and /foo/bar/baz is 2\n * @param {RNodeRuntime} parentNode\n * @param {RNodeRuntime} childNode\n * @returns {number|undefined}\n */\nexport const getDistance = (parentNode, childNode) => {\n    let child = null\n    let distance = 0\n\n    while ((child = childNode.parent)) {\n        distance++\n        if (parentNode === childNode) return distance\n    }\n}\n", "// @ts-ignore\nimport Router from './Router/Router.svelte'\nimport { createRouter, Router as RouterClass } from './Router/Router.js'\nimport { RoutifyRuntime } from './Instance/RoutifyRuntime.js'\n\nimport { appInstance } from './Global/Global.js'\nimport { AddressReflector } from './Router/urlReflectors/Address.js'\nimport { LocalStorageReflector } from './Router/urlReflectors/LocalStorage.js'\nimport { InternalReflector } from './Router/urlReflectors/Internal.js'\nimport Component from './renderer/ComposeFragments.svelte'\n\n// ROUTIFY-DEV-ONLY-START\n// we only need to kill warnings in dev as they don't exist in prod\nimport { killWarnings } from './utils/killWarnings.js'\nkillWarnings()\n// ROUTIFY-DEV-ONLY-END\n\nexport const Routify = RoutifyRuntime\n\nexport {\n    createRouter,\n    Router,\n    RouterClass,\n    appInstance,\n    AddressReflector,\n    LocalStorageReflector,\n    InternalReflector,\n    Component,\n}\n\nexport * from './helpers/index.js'\nexport * from '../common/helpers.js'\n"],
  "mappings": "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",
  "names": ["noop", "prop", "parent", "log", "params", "url", "instance", "params", "params", "context", "url", "router", "node", "defaults", "params", "context", "ctx", "isActive", "fragment", "node", "params", "url", "node", "params", "throttle", "context", "instance", "node", "meta", "ctx", "node", "context", "instance", "node", "children", "params", "url", "instance", "node", "url", "element", "context", "context", "context", "contexts", "context", "context", "params", "url", "_url", "subscribe", "instance", "beforeUrlChange", "afterUrlChange", "onMount", "onDestroy", "ctx", "context", "context", "ctx", "location", "onMount", "elem", "next", "ctx", "create_if_block_1", "_a", "context", "params", "node", "params", "children", "context", "contexts", "node", "context", "ctx", "create_if_block", "context", "childFragments", "childContexts", "ctx", "create_if_block", "instance", "url", "beforeUrlChange", "afterUrlChange", "onDestroy", "context", "activeRoute", "url", "tNode", "node", "Routify"]
}
